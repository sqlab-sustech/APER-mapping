android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)void
android.accounts.AccountManager.getAccounts()android.accounts.Account[]
android.accounts.AccountManager.getAccountsAsUser(int)android.accounts.Account[]
android.app.DownloadManager$Request.setDestinationInExternalPublicDir(java.lang.String,java.lang.String)android.app.DownloadManager.Request
android.app.DownloadManager$Request.setDestinationUri(android.net.Uri)android.app.DownloadManager.Request
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int
android.hardware.camera2.CameraCharacteristics.getKeysNeedingPermission()java.util.List<android.hardware.camera2.CameraCharacteristics.Key<?>>
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(java.util.Map<java.lang.String, android.hardware.camera2.params.SessionConfiguration>)boolean
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void
android.hardware.usb.UsbManager.hasPermission(android.hardware.usb.UsbDevice)boolean
android.hardware.usb.UsbManager.requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)void
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener)boolean
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener,android.os.Handler)boolean
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean
android.location.LocationManager.addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)boolean
android.location.LocationManager.getCurrentLocation(android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void
android.location.LocationManager.getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void
android.location.LocationManager.getGnssCapabilities()android.location.GnssCapabilities
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus
android.location.LocationManager.getLastLocation()android.location.Location
android.location.LocationManager.injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)void
android.location.LocationManager.injectLocation(android.location.Location)boolean
android.location.LocationManager.registerAntennaInfoListener(java.util.concurrent.Executor,android.location.GnssAntennaInfo$Listener)boolean
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean
android.location.LocationManager.registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessageEvent$Callback,android.os.Handler)boolean
android.location.LocationManager.registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)boolean
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback)boolean
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback,android.os.Handler)boolean
android.location.LocationManager.registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)boolean
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)void
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)void
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)void
android.media.RingtoneManager.openRingtone(android.content.Context,android.net.Uri)java.io.InputStream
android.net.wifi.WifiManager.addNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)int
android.net.wifi.WifiManager.addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$SuggestionConnectionStatusListener)void
android.net.wifi.WifiManager.getConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration>
android.net.wifi.WifiManager.getMatchingScanResults(java.util.List<android.net.wifi.WifiNetworkSuggestion>,java.util.List<android.net.wifi.ScanResult>)java.util.Map<android.net.wifi.WifiNetworkSuggestion, java.util.List<android.net.wifi.ScanResult>>
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration>
android.net.wifi.WifiManager.startLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotCallback,android.os.Handler)void
android.net.wifi.WifiManager.watchLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotObserver,android.os.Handler)void
android.net.wifi.aware.IdentityChangedListener.onIdentityChanged(byte[])void
android.net.wifi.aware.WifiAwareManager.attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)void
android.net.wifi.aware.WifiAwareSession.publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)void
android.net.wifi.aware.WifiAwareSession.subscribe(android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)void
android.net.wifi.p2p.WifiP2pManager.addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void
android.net.wifi.p2p.WifiP2pManager.requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DeviceInfoListener)void
android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)void
android.net.wifi.p2p.WifiP2pManager.requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)void
android.net.wifi.rtt.WifiRttManager.startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void
android.net.wifi.rtt.WifiRttManager.startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void
android.os.Build.getSerial()java.lang.String
android.os.StrictMode$VmPolicy$Builder.detectFileUriExposure()android.os.StrictMode.VmPolicy.Builder
android.os.UserManager.getUserSwitchability()int
android.os.UserManager.getUserSwitchability(android.os.UserHandle)int
android.os.storage.StorageVolume.createAccessIntent(java.lang.String)android.content.Intent
android.permission.PermissionManager.getSplitPermissions()java.util.List<android.permission.PermissionManager.SplitPermissionInfo>
android.provider.MediaStore.setRequireOriginal(android.net.Uri)android.net.Uri
android.telecom.Call$Details.getContactDisplayName()java.lang.String
android.telecom.TelecomManager.acceptRingingCall()void
android.telecom.TelecomManager.acceptRingingCall(int)void
android.telecom.TelecomManager.endCall()boolean
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle>
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle>
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle>
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()android.telecom.PhoneAccountHandle
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String
android.telecom.TelecomManager.isInManagedCall()boolean
android.telecom.TelecomManager.isRinging()boolean
android.telecom.TelecomManager.isTtySupported()boolean
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean
android.telecom.TelecomManager.startConference(android.net.Uri,android.os.Bundle)void
android.telephony.CarrierConfigManager.getConfigByComponentForSubId(java.lang.String,int)android.os.PersistableBundle
android.telephony.PhoneStateListener.onCallStateChanged(int,java.lang.String)void
android.telephony.PhoneStateListener.onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)void
android.telephony.PhoneStateListener.onServiceStateChanged(android.telephony.ServiceState)void
android.telephony.SmsManager.checkSmsShortCodeDestination(java.lang.String,java.lang.String)int
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)void
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent,int,boolean,int)void
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)android.telephony.SubscriptionInfo
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)android.telephony.SubscriptionInfo
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo>
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo>
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()java.util.List<android.telephony.SubscriptionInfo>
android.telephony.SubscriptionManager.getResourcesForSubId(android.content.Context,int)android.content.res.Resources
android.telephony.SubscriptionManager.getSubscriptionsInGroup(android.os.ParcelUuid)java.util.List<android.telephony.SubscriptionInfo>
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean
android.telephony.TelephonyManager.endCall()boolean
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo>
android.telephony.TelephonyManager.getAvailableNetworks()com.android.internal.telephony.CellNetworkScanResult
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)android.telephony.ImsiEncryptionInfo
android.telephony.TelephonyManager.getCdmaEriIconIndex()int
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int
android.telephony.TelephonyManager.getCdmaEriIconMode()int
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String
android.telephony.TelephonyManager.getCdmaRoamingMode()int
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation
android.telephony.TelephonyManager.getDataActivationState(int)int
android.telephony.TelephonyManager.getDataNetworkType(int)int
android.telephony.TelephonyManager.getDeviceId()java.lang.String
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String
android.telephony.TelephonyManager.getEmergencyNumberList()java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>>
android.telephony.TelephonyManager.getEmergencyNumberList(int)java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>>
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[]
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[]
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String
android.telephony.TelephonyManager.getImei()java.lang.String
android.telephony.TelephonyManager.getImei(int)java.lang.String
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String
android.telephony.TelephonyManager.getLine1Number()java.lang.String
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String
android.telephony.TelephonyManager.getLteOnCdmaMode()int
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int
android.telephony.TelephonyManager.getMeid()java.lang.String
android.telephony.TelephonyManager.getMeid(int)java.lang.String
android.telephony.TelephonyManager.getMsisdn()java.lang.String
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String
android.telephony.TelephonyManager.getNai()java.lang.String
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo>
android.telephony.TelephonyManager.getNetworkSelectionMode()int
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int
android.telephony.TelephonyManager.getRadioPowerState()int
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String
android.telephony.TelephonyManager.getSubscriberId()java.lang.String
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String
android.telephony.TelephonyManager.getSubscriptionId(android.telecom.PhoneAccountHandle)int
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String
android.telephony.TelephonyManager.getVoiceActivationState(int)int
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String
android.telephony.TelephonyManager.getVoiceMessageCount(int)int
android.telephony.TelephonyManager.getVoiceNetworkType(int)int
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean
android.telephony.TelephonyManager.isIdle()boolean
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean
android.telephony.TelephonyManager.isMultiSimSupported()int
android.telephony.TelephonyManager.isOffhook()boolean
android.telephony.TelephonyManager.isRadioOn()boolean
android.telephony.TelephonyManager.isRinging()boolean
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean
android.telephony.TelephonyManager.requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void
android.telephony.TelephonyManager.requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void
android.telephony.TelephonyManager.sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)void
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void
android.telephony.TelephonyManager.setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo)void
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)void
android.telephony.TelephonyScanManager.requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String)android.telephony.NetworkScan
android.telephony.TelephonyScanManager.requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String,java.lang.String)android.telephony.NetworkScan
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)void
android.telephony.VisualVoicemailService.setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,android.telephony.VisualVoicemailSmsFilterSettings)void
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean
com.android.internal.telephony.TelephonyPermissions.enforeceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void
