android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityManager.getHistoricalProcessExitReasons(java.lang.String,int,int)java.util.List<android.app.ApplicationExitInfo> :: android.permission.DUMP
android.app.ActivityManager.isProfileForeground(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.app.ActivityManager.killProcessesWhenImperceptible(int[],java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.updateMccMncConfiguration(java.lang.String,java.lang.String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityTaskManager.requestPictureInPictureMode(android.os.IBinder)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingMode(int,int,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()android.app.RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)void :: android.permission.WATCH_APPOPS
android.app.DownloadManager.onMediaStoreDownloadsDeleted(android.util.LongSparseArray<java.lang.String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.DreamManager.setActiveDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.startDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.StatsManager.clearPullAtomCallback(int)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.app.StatsManager.setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.app.StatusBarManager.setDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.UiModeManager.enableCarMode(int,int)void :: android.permission.ENTER_CAR_MODE_PRIORITIZED
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()java.util.Set<java.lang.String> :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getFactoryResetProtectionPolicy(android.content.ComponentName)android.app.admin.FactoryResetProtectionPolicy :: android.permission.MASTER_CLEAR
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)void :: android.permission.MARK_DEVICE_ORGANIZATION_OWNED
android.app.backup.BackupManager.excludeKeysFromRestore(java.lang.String,java.util.List<java.lang.String>)void :: android.permission.BACKUP
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.LOG_COMPAT_CHANGE, android.permission.READ_COMPAT_CHANGE_CONFIG :: allOf
android.app.compat.CompatChanges.isChangeEnabled(long,java.lang.String,android.os.UserHandle)boolean :: android.permission.LOG_COMPAT_CHANGE, android.permission.READ_COMPAT_CHANGE_CONFIG :: allOf
android.app.role.RoleControllerManager.isApplicationVisibleForRole(java.lang.String,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.timedetector.TimeDetector.suggestManualTime(android.app.timedetector.ManualTimeSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.timedetector.TimeDetector.suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.NetworkStatsProvider)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STATS_PROVIDER :: anyOf
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(android.net.netstats.provider.NetworkStatsProvider)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STATS_PROVIDER :: anyOf
android.app.usage.StorageStatsManager.queryCratesForUser(java.util.UUID,android.os.UserHandle)java.util.Collection<android.os.storage.CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.UsageStatsManager.isAppInactive(java.lang.String)boolean :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getCodecStatus(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothCodecStatus :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothCodecConfig)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,int)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.setActiveDevice(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getAlias()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setAlias(java.lang.String)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPin(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.close()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.finalize()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(java.lang.String,android.net.MacAddress,android.os.UserHandle)boolean :: android.permission.COMPANION_APPROVE_WIFI_CONNECTIONS, android.permission.MANAGE_COMPANION_DEVICES, andrioid.permission.MANAGE_COMPANION_DEVICES
android.content.Context.registerReceiverForAllUsers(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.om.OverlayManager.invalidateCachesForOverlay(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.CrossProfileApps.canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_APP_OPS_MODES, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: allOf
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(java.util.Collection<java.lang.String>,java.util.Set<java.lang.String>)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_APP_OPS_MODES, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: allOf
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(java.lang.String,int)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_APP_OPS_MODES, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: allOf
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.content.pm.LauncherApps.cacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller$Session.addFile(int,java.lang.String,long,byte[],byte[])void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.getDataLoaderParams()android.content.pm.DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.removeFile(int,java.lang.String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$SessionParams.setDataLoaderParams(android.content.pm.DataLoaderParams)void :: android.permission.INSTALL_PACKAGES, android.permission.USE_INSTALLER_V2 :: allOf
android.content.pm.PackageInstaller.uninstallExistingPackage(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.isAutoRevokeWhitelisted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getAuthenticatorIds()long[] :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setTextForDeviceCredential(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(java.util.Map<java.lang.String,android.hardware.camera2.params.SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.display.DisplayManager.setTemporaryBrightness(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryBrightness(float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.fingerprint.FingerprintManager.detectFingerprint(android.os.CancellationSignal,android.hardware.fingerprint.FingerprintManager$FingerprintDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.isHdmiCecVolumeControlEnabled()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(boolean)void :: android.permission.HDMI_CEC
android.hardware.input.InputManager.addPortAssociation(java.lang.String,int)void :: android.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT
android.hardware.input.InputManager.removePortAssociation(java.lang.String)void :: android.permissions.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT
android.hardware.lights.LightsManager$LightsSession.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager$LightsSession.requestLights(android.hardware.lights.LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.getLightState(android.hardware.lights.Light)android.hardware.lights.LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.getLights()java.util.List<android.hardware.lights.Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.openSession()android.hardware.lights.LightsManager.LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.location.LocationManager.addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getCurrentLocation(android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.getLastLocation()android.location.Location :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.getProviderPackages(java.lang.String)java.util.List<java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.registerAntennaInfoListener(java.util.concurrent.Executor,android.location.GnssAntennaInfo$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE :: allOf
android.location.LocationManager.registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.media.AudioAttributes$Builder.setSystemUsage(int)android.media.AudioAttributes.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(int,java.lang.String)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(android.media.AudioAttributes)java.util.List<android.media.AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)android.media.AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo,long)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(int,java.lang.String,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages(int[])void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$Builder.setTunerConfiguration(android.media.AudioTrack$TunerConfiguration)android.media.AudioTrack.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$TunerConfiguration.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$TunerConfiguration.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.RingtoneManager.ensureDefaultRingtones(android.content.Context)void :: android.permission.WRITE_SETTINGS
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(java.util.UUID,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.projection.MediaProjectionManager.getMediaProjection(int,android.content.Intent)android.media.projection.MediaProjection :: android.permission.SYSTEM_ALERT_WINDOW
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()android.media.soundtrigger.SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(java.util.UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(java.util.UUID,int)android.hardware.soundtrigger.SoundTrigger.ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(java.util.UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,java.lang.String,int,java.util.concurrent.Executor,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getClientPid(java.lang.String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getDvbDeviceList()java.util.List<android.media.tv.DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(android.media.tv.DvbDeviceInfo,int)android.os.ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.tv.tuner.Tuner.openDescrambler()android.media.tv.tuner.Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,java.util.Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,java.util.Locale)android.media.voice.SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(android.media.voice.SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.net.CaptivePortal.reevaluateNetwork()void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.declareNetworkRequestUnfulfillable(android.net.NetworkRequest)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.getMobileProvisioningUrl()java.lang.String :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.getTetheredDhcpRanges()java.lang.String[] :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig)android.net.Network :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)android.net.Network :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkFactory(android.os.Messenger,java.lang.String)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkProvider(android.net.NetworkProvider)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,int,int,android.os.Handler,android.net.ConnectivityManager$NetworkCallback)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)void :: android.permission.NETWORK_STACK, android.permission.MANAGE_TEST_NETWORKS :: anyOf
android.net.ConnectivityManager.unregisterNetworkFactory(android.os.Messenger)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.unregisterNetworkProvider(android.net.NetworkProvider)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.EthernetManager.requestTetheredInterface(java.util.concurrent.Executor,android.net.EthernetManager$TetheredInterfaceCallback)android.net.EthernetManager.TetheredInterfaceRequest :: android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.LinkProperties.getCaptivePortalApiUrl()android.net.Uri :: android.permission.NETWORK_SETTINGS
android.net.LinkProperties.getCaptivePortalData()android.net.CaptivePortalData :: android.permission.NETWORK_SETTINGS
android.net.NetworkCapabilities$Builder.setAdministratorUids(int[])android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setOwnerUid(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setRequestorPackageName(java.lang.String)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setRequestorUid(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setSignalStrength(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkCapabilities$Builder.setSsid(java.lang.String)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkPolicyManager.registerSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkProvider.declareNetworkRequestUnfulfillable(android.net.NetworkRequest)void :: android.permission.NETWORK_FACTORY
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(java.util.Collection<android.net.NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.wifi.WifiManager.addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$SuggestionConnectionStatusListener)void :: android.permission.ACCESS_WIFI_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.net.wifi.WifiManager.allowAutojoin(int,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoinGlobal(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoinPasspoint(java.lang.String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.clearWifiConnectedNetworkScorer()void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCountryCode()java.lang.String :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCurrentNetwork()android.net.Network :: android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_SETTINGS :: anyOf
android.net.wifi.WifiManager.getMatchingScanResults(java.util.List<android.net.wifi.WifiNetworkSuggestion>,java.util.List<android.net.wifi.ScanResult>)java.util.Map<android.net.wifi.WifiNetworkSuggestion,java.util.List<android.net.wifi.ScanResult>> :: android.permission.ACCESS_WIFI_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.net.wifi.WifiManager.getNetworkSuggestions()java.util.List<android.net.wifi.WifiNetworkSuggestion> :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getSoftApConfiguration()android.net.wifi.SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getWifiActivityEnergyInfoAsync(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiActivityEnergyInfoListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(java.util.List<android.net.wifi.ScanResult>)java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_SETTINGS :: anyOf
android.net.wifi.WifiManager.isAutoWakeupEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isScanThrottleEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.registerNetworkRequestMatchCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerScanResultsCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.registerSoftApCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerTrafficStateCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.removeSuggestionConnectionStatusListener(android.net.wifi.WifiManager$SuggestionConnectionStatusListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.restoreBackupData(byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSoftApBackupData(byte[])android.net.wifi.SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSupplicantBackupData(byte[],byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveSoftApBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setAutoWakeupEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setMacRandomizationSettingPasspointEnabled(java.lang.String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setPasspointMeteredOverride(java.lang.String,int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setScanAlwaysAvailable(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setScanThrottleEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setSoftApConfiguration(android.net.wifi.SoftApConfiguration)boolean :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setVerboseLoggingEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setWifiConnectedNetworkScorer(java.util.concurrent.Executor,android.net.wifi.WifiManager$WifiConnectedNetworkScorer)boolean :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.startLocalOnlyHotspot(android.net.wifi.SoftApConfiguration,java.util.concurrent.Executor,android.net.wifi.WifiManager$LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_SETTINGS :: anyOf
android.net.wifi.WifiManager.startSoftAp(android.net.wifi.WifiConfiguration)boolean :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.startTetheredHotspot(android.net.wifi.SoftApConfiguration)boolean :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.stopSoftAp()boolean :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.unregisterScanResultsCallback(android.net.wifi.WifiManager$ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.updateInterfaceIpState(java.lang.String,int)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiNetworkSuggestion$Builder.setCarrierId(int)android.net.wifi.WifiNetworkSuggestion.Builder :: android.permission.NETWORK_CARRIER_PROVISIONING
android.net.wifi.WifiScanner.getAvailableChannels(int)java.util.List<java.lang.Integer> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getSingleScanResults()java.util.List<android.net.wifi.ScanResult> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.registerScanListener(java.util.concurrent.Executor,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startDisconnectedPnoScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$PnoSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner$PnoScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.aware.WifiAwareManager.requestMacAddresses(int,java.util.List<java.lang.Integer>,android.net.wifi.aware.IWifiAwareMacAddressProvider)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager$Channel,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.p2p.WifiP2pManager.requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)void :: android.permission.READ_WIFI_CREDENTIAL, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.p2p.WifiP2pManager.setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.p2p.WifiP2pManager.setMiracastMode(int)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWfdInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWifiP2pChannels(android.net.wifi.p2p.WifiP2pManager$Channel,int,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.OVERRIDE_WIFI_CONFIG, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.p2p.WifiP2pManager.startListening(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.stopListening(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()java.util.List<java.lang.String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()java.lang.CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()java.lang.String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.os.BatteryStatsManager.getCellularBatteryStats()android.os.connectivity.CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()android.os.connectivity.WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStartedFromSource(android.os.WorkSource,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiRssiChanged(int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,java.lang.String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BugreportManager.requestBugreport(android.os.BugreportParams,java.lang.CharSequence,java.lang.CharSequence)void :: android.permission.DUMP
android.os.Environment.isExternalStorageManager()boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.Environment.isExternalStorageManager(java.io.File)boolean :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(java.lang.String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(java.lang.String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerWhitelistManager.addToWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(java.util.List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,java.lang.String)void :: android.permission.RECOVERY
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()java.util.Set<java.lang.String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()java.util.Map<java.lang.String,java.util.List<android.os.CarrierAssociatedAppEntry>> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()java.util.Map<java.lang.String,java.util.List<java.lang.String>> :: android.permission.READ_CARRIER_APP_INFO
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(java.lang.String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canHaveRestrictedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.createGuest(android.content.Context,java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfile(java.lang.String,java.lang.String,java.util.Set<java.lang.String>)android.os.UserHandle :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createRestrictedProfile(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createUser(java.lang.String,java.lang.String,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.findCurrentGuestUser()android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getAllProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getBadgedLabelForUser(java.lang.CharSequence,android.os.UserHandle)java.lang.CharSequence :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()android.os.Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getEnabledProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileParent(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserCount()int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserHandles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)android.graphics.Bitmap :: android.permission.GET_ACCOUNTS_PRIVILEGED, android.permission.MANAGE_USERS :: anyOf
android.os.UserManager.getUserName()java.lang.String :: android.permission.GET_ACCOUNTS_PRIVILEGED, android.permission.MANAGE_USERS :: anyOf
android.os.UserManager.getUserRestrictions(android.os.UserHandle)android.os.Bundle :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.getUserSwitchability(android.os.UserHandle)int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.hasBaseUserRestriction(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isEphemeralUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isGuestUser(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isProfile()boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isSameProfileGroup(android.os.UserHandle,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserNameSet()boolean :: android.permission.GET_ACCOUNTS_PRIVILEGED, android.permission.MANAGE_USERS :: anyOf
android.os.UserManager.isUserOfType(java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserRunning(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunning(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunningOrStopping(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.preCreateUser(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.MODIFY_QUIET_MODE :: anyOf
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle,android.content.IntentSender,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setDefaultGuestRestrictions(android.os.Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(java.lang.String,java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.Vibrator.addVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(java.util.concurrent.Executor,android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.setAlwaysOnEffect(int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.image.DynamicSystemManager$Session.getAvbPublicKey(android.gsi.AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.setAshmem(android.os.ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(java.lang.String,long,boolean)android.os.image.DynamicSystemManager.Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(java.lang.String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<byte[]>)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromLuiApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.startOneTimePermissionSession(java.lang.String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(java.lang.String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.provider.DeviceConfig.getProperties(java.lang.String,java.lang.String...)android.provider.DeviceConfig.Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(android.provider.DeviceConfig$Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.getStrings(android.content.ContentResolver,java.lang.String,java.util.List<java.lang.String>)java.util.Map<java.lang.String,java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.registerMonitorCallback(android.content.ContentResolver,android.os.RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.provider.Settings$Config.setStrings(android.content.ContentResolver,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(java.security.cert.X509Certificate)boolean :: android.permission.INSTALL_PACKAGES, android.permission.REQUEST_INSTALL_PACKAGES :: anyOf
android.service.dataloader.DataLoaderService$FileSystemConnector.writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()android.media.voice.KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.telecom.Call$Details.getContactDisplayName()java.lang.String :: android.permission.READ_CONTACTS
android.telecom.Conference.setAddress(android.net.Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectTimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.PhoneAccount$Builder.setGroupId(java.lang.String)android.telecom.PhoneAccount.Builder :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.addNewIncomingConference(android.telecom.PhoneAccountHandle,android.os.Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(android.os.UserHandle)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.startConference(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE
android.telephony.CarrierConfigManager.getConfigByComponentForSubId(java.lang.String,int)android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onServiceStateChanged(android.telephony.ServiceState)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.disableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.enableCellBroadcastRange(int,int,int)boolean :: android.permission.RECEIVE_EMERGENCY_BROADCAST
android.telephony.SmsManager.getMessagesFromIcc()java.util.List<android.telephony.SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getPremiumSmsConsent(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(java.lang.String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsMessage.getSubmitPduEncodedMessage(boolean,java.lang.String,java.lang.String,int,int,int,int,int,int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(java.lang.String)android.telephony.SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getResourcesForSubId(android.content.Context,int)android.content.res.Resources :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(java.lang.String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPassword(java.lang.String,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getCallForwarding(int)android.telephony.CallForwardingInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriInformation()android.telephony.CdmaEriInformation :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getEffectiveAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()java.lang.String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriptionId(android.telecom.PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(java.lang.String,int,java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.setAllowedCarriers(int,java.util.List<android.service.carrier.CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysAllowMmsData(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(android.telephony.CallForwardingInfo)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingStatus(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(java.util.List<java.lang.String>)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_PHONE_STATEMODIFY_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportPinResult(java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportPinResult(java.lang.String,java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyScanManager.requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String,java.lang.String)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(java.lang.String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.ims.ImsMmTelManager.createForSubscriptionId(int)android.telephony.ims.ImsMmTelManager :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.getFeatureState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.isSupported(int,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsRcsManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerRcsAvailabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsRcsManager$AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterRcsAvailabilityCallback(android.telephony.ims.ImsRcsManager$AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.requestCapabilities(java.util.concurrent.Executor,android.net.Uri,android.telephony.ims.RcsUceAdapter$CapabilitiesCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutTargets(int)java.util.List<java.lang.String> :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int,java.lang.String)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut(java.lang.String)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.registerSystemAction(android.app.RemoteAction,int)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.unregisterSystemAction(int)void :: android.permission.MANAGE_ACCESSIBILITY
android.window.DisplayAreaOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.createRootTask(int,int)android.app.ActivityManager.RunningTaskInfo :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.deleteRootTask(android.window.WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getChildTasks(android.window.WindowContainerToken,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getImeTarget(int)android.window.WindowContainerToken :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getRootTasks(int,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setLaunchRoot(int,android.window.WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.applySyncTransaction(android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.applyTransaction(android.window.WindowContainerTransaction)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.getWindowOrganizerController()android.window.IWindowOrganizerController :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.takeScreenshot(android.window.WindowContainerToken)android.view.SurfaceControl :: android.permission.READ_FRAME_BUFFER
com.android.server.ConnectivityService.setVpnPackageAuthorization(java.lang.String,int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.connectivity.Vpn.setAlwaysOnPackage(java.lang.String,boolean,java.util.List<java.lang.String>,android.security.KeyStore)boolean :: android.permission.BIND_VPN_SERVICE
com.android.server.devicepolicy.DevicePolicyManagerService$LocalService.broadcastIntentToCrossProfileManifestReceiversAsUser(android.content.Intent,android.os.UserHandle,boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.pm.PackageManagerService.doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],boolean,android.util.SparseArray)void :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.UserManagerService.ensureCanModifyQuietMode(java.lang.String,int,int,boolean,boolean)void :: android.permission.MANAGE_USERS, android.permission.MODIFY_QUIET_MODE
com.android.server.usage.StorageStatsService.enforceCratesPermission(int,java.lang.String)void :: android.permission.MANAGE_CRATES
com.android.server.usage.UsageStatsService.shouldObfuscateNotificationEvents(int,int)boolean :: android.permission.MANAGE_NOTIFICATIONS
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW