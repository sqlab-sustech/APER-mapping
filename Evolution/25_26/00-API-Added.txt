android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.UPDATE_APP_OPS_STATS
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.admin.DevicePolicyManager.bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.BIND_DEVICE_ADMIN
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts(android.os.UserHandle)java.util.List<java.lang.String> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.trust.TrustManager.reportUnlockLockout(int,int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.bluetooth.BluetoothDevice.createInsecureL2capSocket(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.discoverServiceByUuid(java.util.UUID)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(java.util.UUID,int,int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothGatt.registerApp(android.bluetooth.BluetoothGattCallback,android.os.Handler)boolean :: android.permission.BLUETOOTH
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.companion.CompanionDeviceManager.associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager$Callback,android.os.Handler)void :: android.permission.USE_DATA_IN_BACKGROUND, android.permission.RUN_IN_BACKGROUND
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageManager.canRequestPackageInstalls()boolean :: android.permission.REQUEST_INSTALL_PACKAGES
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION :: anyOf
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.MediaExtractor.setDataSource(android.content.Context,android.net.Uri,java.util.Map<java.lang.String,java.lang.String>)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(java.lang.String)void :: android.permission.INTERNET
android.media.MediaExtractor.setDataSource(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)void :: android.permission.INTERNET
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler,int)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.disableScoring()void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.TrafficStats.clearThreadStatsUid()void :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManager.getConnectionStatistics()android.net.wifi.WifiConnectionStatistics :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)boolean :: android.permission.TETHER_PRIVILEGED
android.net.wifi.WifiManager.startLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotCallback,android.os.Handler)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.watchLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotObserver,android.os.Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.aware.IdentityChangedListener.onIdentityChanged(byte[])void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareManager.attach(android.net.wifi.aware.AttachCallback,android.net.wifi.aware.IdentityChangedListener,android.os.Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.net.wifi.aware.WifiAwareSession.subscribe(android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)void :: android.permission.ACCESS_COARSE_LOCATION
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PHONE_STATE
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(java.lang.String,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.PowerManager.getLastShutdownReason()int :: android.permission.DEVICE_POWER
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getManagedProfileBadge(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManagerInternal.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.MODIFY_PHONE_STATE, android.permission.ANSWER_PHONE_CALLS :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.MODIFY_PHONE_STATE, android.permission.ANSWER_PHONE_CALLS :: anyOf
android.telecom.TelecomManager.addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)void :: android.permission.MANAGE_OWN_CALLS
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.endCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(int,java.lang.String,int)android.telephony.IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String,int)android.telephony.IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_NETWORK_STATE
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.VisualVoicemailService.sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.VisualVoicemailService.setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,android.telephony.VisualVoicemailSmsFilterSettings)void :: android.permission.READ_PHONE_STATE
android.view.WindowManagerPolicy$WindowState.canAddInternalSystemWindow()boolean :: android.permission.INTERNAL_SYSTEM_WINDOW
android.view.WindowManagerPolicy.getWindowLayerFromTypeLw(int,boolean)int :: android.permission.INTERNAL_SYSTEM_WINDOW
android.widget.TextView.setRestrictedAcrossUser(boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS
com.android.internal.util.DumpUtils.checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.DUMP
com.android.internal.util.DumpUtils.checkUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)boolean :: android.permission.PACKAGE_USAGE_STATS
com.android.server.pm.PackageManagerService.canViewInstantApps(int,int)boolean :: android.permission.ACCESS_INSTANT_APPS
com.android.server.vr.Vr2dDisplay.setVirtualDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER
com.android.server.vr.VrManagerInternal.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.ACCESS_VR_MANAGER