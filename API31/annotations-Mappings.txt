android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(android.os.UserHandle)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE, android.permission.WRITE_SECURE_SETTINGS :: allOf
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.startConference(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectTimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setAddress(android.net.Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.PhoneAccount$Builder.setGroupId(java.lang.String)android.telecom.PhoneAccount.Builder :: android.permission.MODIFY_PHONE_STATE
android.content.ContentResolver.putCache(android.net.Uri,android.os.Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(android.net.Uri)android.os.Bundle :: android.permission.CACHE_CONTENT
android.content.rollback.RollbackManager.getAvailableRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.commitRollback(int,java.util.List<android.content.pm.VersionedPackage>,android.content.IntentSender)void :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(java.lang.String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.om.OverlayManager.setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.setEnabled(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)java.util.List<android.content.om.OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.invalidateCachesForOverlay(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.ShortcutManager.getShareTargets(android.content.IntentFilter)java.util.List<android.content.pm.ShortcutManager.ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallback)void :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)android.content.pm.ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.GET_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(java.lang.String,int)java.util.Set<java.lang.String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.isAutoRevokeWhitelisted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(java.lang.String,int)java.util.List<android.content.pm.SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_EXISTING_PACKAGES, android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(java.lang.String,boolean)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions(java.lang.String[],int)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages(java.lang.String[])java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(java.lang.String,java.lang.CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(java.lang.String)java.lang.CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)void :: android.permission.INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.CrossProfileApps.startActivity(android.content.ComponentName,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(java.lang.String,int)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(java.util.Collection<java.lang.String>,java.util.Set<java.lang.String>)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.LauncherApps.cacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.installExistingPackage(java.lang.String,int,android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES, android.permission.INSTALL_EXISTING_PACKAGES :: allOf
android.content.pm.PackageInstaller.uninstallExistingPackage(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$Session.getDataLoaderParams()android.content.pm.DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.addFile(int,java.lang.String,long,byte[],byte[])void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.removeFile(int,java.lang.String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller$SessionParams.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setDataLoaderParams(android.content.pm.DataLoaderParams)void :: android.permission.INSTALL_PACKAGES, android.permission.USE_INSTALLER_V2 :: allOf
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)int :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverForAllUsers(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setTextOperationUser(android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.NetworkPolicyManager.registerSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.CaptivePortal.reevaluateNetwork()void :: android.permission.NETWORK_STACK
android.net.IpSecTransform.startNattKeepalive(android.net.IpSecTransform$NattKeepaliveCallback,int,android.os.Handler)void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform.stopNattKeepalive()void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform$Builder.buildTunnelModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)android.net.IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.EthernetManager.requestTetheredInterface(java.util.concurrent.Executor,android.net.EthernetManager$TetheredInterfaceCallback)android.net.EthernetManager.TetheredInterfaceRequest :: android.permission.NETWORK_STACK, android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.NetworkCapabilities$Builder.setOwnerUid(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setAdministratorUids(int[])android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setSignalStrength(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkCapabilities$Builder.setSsid(java.lang.String)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setRequestorUid(int)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkCapabilities$Builder.setRequestorPackageName(java.lang.String)android.net.NetworkCapabilities.Builder :: android.permission.NETWORK_FACTORY
android.net.NetworkProvider.declareNetworkRequestUnfulfillable(android.net.NetworkRequest)void :: android.permission.NETWORK_FACTORY
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)android.net.Network :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,java.util.List<java.lang.String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getAlwaysOnVpnPackageForUser(int)java.lang.String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getVpnLockdownWhitelist(int)java.util.List<java.lang.String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)android.net.NetworkInfo :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getCaptivePortalServerUrl()java.lang.String :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.createNattKeepalive(android.net.Network,android.os.ParcelFileDescriptor,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)android.net.SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.createSocketKeepalive(android.net.Network,java.net.Socket,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)android.net.SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.getTetherableIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredDhcpRanges()java.lang.String[] :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.TETHER_PRIVILEGED, android.permission.WRITE_SETTINGS :: anyOf
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.registerTetheringEventCallback(java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.unregisterTetheringEventCallback(android.net.ConnectivityManager$OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLatestTetheringEntitlementResult(int,boolean,java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEntitlementResultListener)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getMobileProvisioningUrl()java.lang.String :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.NETWORK_AIRPLANE_MODE, android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.ConnectivityManager.registerNetworkFactory(android.os.Messenger,java.lang.String)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.unregisterNetworkFactory(android.os.Messenger)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkProvider(android.net.NetworkProvider)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.unregisterNetworkProvider(android.net.NetworkProvider)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.declareNetworkRequestUnfulfillable(android.net.NetworkRequest)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig)android.net.Network :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)android.net.Network :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_FACTORY :: anyOf
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,int,int,android.os.Handler,android.net.ConnectivityManager$NetworkCallback)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network,boolean,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.setAcceptPartialConnectivity(android.net.Network,boolean,boolean)void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.setAvoidUnvalidated(android.net.Network)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network,android.os.Bundle)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.shouldAvoidBadWifi()boolean :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)void :: android.permission.MANAGE_TEST_NETWORKS, android.permission.NETWORK_STACK :: anyOf
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkRequest$Builder.setSignalStrength(int)android.net.NetworkRequest.Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkScoreManager.getActiveScorerPackage()java.lang.String :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()java.util.List<android.net.NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.requestScores(android.net.NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(java.util.Collection<android.net.NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.IpSecManager$IpSecTunnelInterface.addAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager$IpSecTunnelInterface.removeAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)android.net.IpSecManager.IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface,int,android.net.IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.os.BatteryStatsManager.reportWifiRssiChanged(int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,java.lang.String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStartedFromSource(android.os.WorkSource,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getCellularBatteryStats()android.os.connectivity.CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()android.os.connectivity.WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.image.DynamicSystemManager$Session.setAshmem(android.os.ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.getAvbPublicKey(android.gsi.AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(java.lang.String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(java.lang.String,long,boolean)android.os.image.DynamicSystemManager.Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()android.gsi.GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()java.util.Set<java.lang.String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()java.util.Map<java.lang.String, java.util.List<java.lang.String>> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()java.util.Map<java.lang.String, java.util.List<android.os.CarrierAssociatedAppEntry>> :: android.permission.READ_CARRIER_APP_INFO
android.os.Vibrator.setAlwaysOnEffect(int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(java.util.concurrent.Executor,android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.BugreportManager.startBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.BugreportParams,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.cancelBugreport()void :: android.permission.DUMP
android.os.BugreportManager.requestBugreport(android.os.BugreportParams,java.lang.CharSequence,java.lang.CharSequence)void :: android.permission.DUMP
android.os.DropBoxManager.getNextEntry(java.lang.String,long)android.os.DropBoxManager.Entry :: android.permission.READ_LOGS, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()java.util.List<android.os.IncidentManager.PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(java.lang.String)java.util.List<android.net.Uri> :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.getIncidentReport(android.net.Uri)android.os.IncidentManager.IncidentReport :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.deleteIncidentReports(android.net.Uri)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.PowerManager.dream(long)void :: android.permission.READ_DREAM_STATE, android.permission.WRITE_DREAM_STATE :: allOf
android.os.PowerManager.reboot(java.lang.String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.getPowerSaveModeTrigger()int :: android.permission.POWER_SAVER
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(java.lang.String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(java.lang.String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)void :: android.permission.RECOVERY
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,java.lang.String)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()android.os.Bundle :: android.permission.READ_SYSTEM_UPDATE_INFO, android.permission.RECOVERY :: anyOf
android.os.SystemUpdateManager.updateSystemUpdateInfo(android.os.PersistableBundle)void :: android.permission.RECOVERY
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.UserManager.getUserSwitchability()int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.getUserSwitchability(android.os.UserHandle)int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.getUserName()java.lang.String :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.isUserNameSet()boolean :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.isPrimaryUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserOfType(java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.canHaveRestrictedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isGuestUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isProfile()boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isEphemeralUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserRunning(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunning(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunningOrStopping(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.getUserInfo(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(android.os.UserHandle)android.os.Bundle :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.hasBaseUserRestriction(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.setUserRestriction(java.lang.String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.createUser(java.lang.String,java.lang.String,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.preCreateUser(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createGuest(android.content.Context,java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.findCurrentGuestUser()android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfile(java.lang.String,java.lang.String,java.util.Set<java.lang.String>)android.os.UserHandle :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,int,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createRestrictedProfile(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserCount()int :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers()java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean,boolean,boolean)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserHandles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.getPrimaryUser()android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(java.lang.String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isSameProfileGroup(android.os.UserHandle,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getEnabledProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getAllProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfiles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(android.os.UserHandle)android.os.UserHandle :: android.permission.MANAGE_USERS
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.MODIFY_QUIET_MODE :: anyOf
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle,android.content.IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.removeUser(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.setUserName(int,java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)android.graphics.Bitmap :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.getUserIcon()android.graphics.Bitmap :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.setDefaultGuestRestrictions(android.os.Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()android.os.Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(java.lang.String,java.lang.String)boolean :: android.permission.MANAGE_USERS
android.telephony.PhoneStateListener.onPreciseCallStateChanged(android.telephony.PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.permission.PermissionControllerManager.revokeRuntimePermissions(java.util.Map<java.lang.String, java.util.List<java.lang.String>>,boolean,int,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,java.lang.String,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY :: allOf
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<byte[]>)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionControllerManager.getAppPermissions(java.lang.String,android.permission.PermissionControllerManager$OnGetAppPermissionResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(java.lang.String,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(java.util.List<java.lang.String>,int,android.permission.PermissionControllerManager$OnCountPermissionAppsResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY, android.permission.UPGRADE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.setRuntimePermissionsVersion(int)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY, android.permission.UPGRADE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromLuiApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.startOneTimePermissionSession(java.lang.String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(java.lang.String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.service.oemlock.OemLockManager.getLockName()java.lang.String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.dataloader.DataLoaderService$FileSystemConnector.writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()android.media.voice.KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(java.security.cert.X509Certificate)boolean :: android.permission.INSTALL_PACKAGES, android.permission.REQUEST_INSTALL_PACKAGES :: anyOf
android.security.keystore.recovery.RecoverySession.newInstance(android.security.keystore.recovery.RecoveryController)android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],java.util.List<android.security.keystore.recovery.WrappedApplicationKey>)java.util.Map<java.lang.String, java.security.Key> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getInstance(android.content.Context)android.security.keystore.recovery.RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(android.content.Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()android.security.keystore.recovery.KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(android.app.PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()java.util.List<java.lang.String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[],byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(java.lang.String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()java.util.Map<java.lang.String, java.security.cert.X509Certificate> :: android.permission.RECOVER_KEYSTORE
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.window.WindowOrganizer.applyTransaction(android.window.WindowContainerTransaction)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.applySyncTransaction(android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.WindowOrganizer.takeScreenshot(android.window.WindowContainerToken)android.view.SurfaceControl :: android.permission.READ_FRAME_BUFFER
android.window.WindowOrganizer.getWindowOrganizerController()android.window.IWindowOrganizerController :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.createRootTask(int,int)android.app.ActivityManager.RunningTaskInfo :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.deleteRootTask(android.window.WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getChildTasks(android.window.WindowContainerToken,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getRootTasks(int,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.getImeTarget(int)android.window.WindowContainerToken :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setLaunchRoot(int,android.window.WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.DisplayAreaOrganizer.registerOrganizer(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getActiveDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getHiSyncId(android.bluetooth.BluetoothDevice)long :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHearingAid.getDeviceSide(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceMode(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setBluetoothClass(android.bluetooth.BluetoothClass)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.setActiveDevice(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(android.bluetooth.BluetoothDevice,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.finalize()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.close()void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothSap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadsetClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getAlias()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setAlias(java.lang.String)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPin(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMetadata(int,byte[])boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothMapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.getCodecStatus(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothCodecStatus :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothCodecConfig)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,int)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPbapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothA2dpSink.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPan.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHidHost.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothHidHost.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.face.FaceManager.authenticate(android.hardware.biometrics.CryptoObject,android.os.CancellationSignal,int,android.hardware.face.FaceManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge()long :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge()int :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],android.hardware.face.FaceManager$SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,android.hardware.face.FaceManager$GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.userActivity()void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setActiveUser(int)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(android.hardware.face.Face,int,android.hardware.face.FaceManager$RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(android.hardware.face.FaceManager$LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(java.util.Map<java.lang.String, android.hardware.camera2.params.SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.detectFingerprint(android.os.CancellationSignal,android.hardware.fingerprint.FingerprintManager$FingerprintDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.isHdmiCecVolumeControlEnabled()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.SensorPrivacyManager.setSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.usb.UsbPort.getStatus()android.hardware.usb.UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.grantPermission(android.hardware.usb.UsbDevice,java.lang.String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()java.util.List<android.hardware.usb.UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(android.hardware.usb.UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.radio.RadioManager.listModules(java.util.List<android.hardware.radio.RadioManager$ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.RadioTuner$Callback,android.os.Handler)android.hardware.radio.RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.concurrent.Executor,java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.location.ContextHubClient.sendMessageToNanoApp(android.hardware.location.NanoAppMessage)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubs()java.util.List<android.hardware.location.ContextHubInfo> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.loadNanoApp(android.hardware.location.ContextHubInfo,android.hardware.location.NanoAppBinary)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.unloadNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.enableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.disableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.queryNanoApps(android.hardware.location.ContextHubInfo)android.hardware.location.ContextHubTransaction<java.util.List<android.hardware.location.NanoAppState>> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback,java.util.concurrent.Executor)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.getBrightnessEvents()java.util.List<android.hardware.display.BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()java.util.List<android.hardware.display.AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setSaturationLevel(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setAppSaturationLevel(java.lang.String,int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.setActiveUser(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockout(byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getAuthenticatorIds()long[] :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setUseDefaultTitle()android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setTextForDeviceCredential(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(android.hardware.biometrics.BiometricPrompt$CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.lights.LightsManager.getLights()java.util.List<android.hardware.lights.Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.getLightState(android.hardware.lights.Light)android.hardware.lights.LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager.openSession()android.hardware.lights.LightsManager.LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager$LightsSession.requestLights(android.hardware.lights.LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.LightsManager$LightsSession.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut()void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut(java.lang.String)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.registerSystemAction(android.app.RemoteAction,int)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.unregisterSystemAction(int)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int,java.lang.String)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutTargets(int)java.util.List<java.lang.String> :: android.permission.MANAGE_ACCESSIBILITY
android.view.WindowManager.getCurrentImeTouchRegion()android.graphics.Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()android.app.StatusBarManager.DisableInfo :: android.permission.STATUS_BAR
android.app.DownloadManager.onMediaStoreDownloadsDeleted(android.util.LongSparseArray<java.lang.String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.usage.StorageStatsManager.queryCratesForUser(java.util.UUID,android.os.UserHandle)java.util.Collection<android.os.storage.CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.app.usage.UsageStatsManager.getAppStandbyBucket(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(java.lang.String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()java.util.Map<java.lang.String, java.lang.Integer> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(java.util.Map<java.lang.String, java.lang.Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS :: anyOf
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.switchUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.app.ActivityManager.updateMccMncConfiguration(java.lang.String,java.lang.String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(java.util.List<java.lang.String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.isProfileForeground(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.app.ActivityManager.killProcessesWhenImperceptible(int[],java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.DreamManager.startDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.setActiveDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.AppOpsManager.getPackagesForOps(java.lang.String[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps(int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,java.lang.String...)java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(java.lang.String,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,java.lang.String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(android.app.AppOpsManager$HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()android.app.RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.ActivityTaskManager.setTaskWindowingMode(int,int,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.moveTopActivityToPinnedStack(int,android.graphics.Rect)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.moveTaskToStack(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeTask(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeDockedStack(android.graphics.Rect,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.listAllStacks()java.lang.String :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(java.util.List<java.lang.String>)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setDisplayToSingleTaskInstance(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.requestPictureInPictureMode(android.os.IBinder)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(java.lang.String)void :: android.permission.SET_TIME_ZONE
android.app.compat.CompatChanges.isChangeEnabled(long,java.lang.String,android.os.UserHandle)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG, android.permission.LOG_COMPAT_CHANGE :: allOf
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG, android.permission.LOG_COMPAT_CHANGE :: allOf
android.app.timedetector.TimeDetector.suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestManualTime(android.app.timedetector.ManualTimeSuggestion)void :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(android.os.UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()android.content.ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(java.lang.String)java.lang.CharSequence :: android.permission.BACKUP
android.app.backup.BackupManager.excludeKeysFromRestore(java.lang.String,java.util.List<java.lang.String>)void :: android.permission.BACKUP
android.app.role.RoleControllerManager.isApplicationQualifiedForRole(java.lang.String,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleControllerManager.isApplicationVisibleForRole(java.lang.String,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleControllerManager.isRoleVisible(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHolders(java.lang.String)java.util.List<java.lang.String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)java.util.List<java.lang.String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.removeRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.clearRoleHoldersAsUser(java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.removeOnRoleHoldersChangedListenerAsUser(android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.setRoleNamesFromController(java.util.List<java.lang.String>)void :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.addRoleHolderFromController(java.lang.String,java.lang.String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.removeRoleHolderFromController(java.lang.String,java.lang.String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.getHeldRolesFromController(java.lang.String)java.util.List<java.lang.String> :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.Activity.registerRemoteAnimations(android.view.RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.UiModeManager.enableCarMode(int,int)void :: android.permission.ENTER_CAR_MODE_PRIORITIZED
android.app.VrManager.registerVrStateCallback(java.util.concurrent.Executor,android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.unregisterVrStateCallback(android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()android.os.UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)void :: android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)void :: android.permission.MARK_DEVICE_ORGANIZATION_OWNED
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()java.util.Set<java.lang.String> :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(java.lang.String,android.net.MacAddress,android.os.UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(android.content.ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()java.util.List<java.lang.String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()java.lang.String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()java.lang.CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Config.getString(android.content.ContentResolver,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.getStrings(android.content.ContentResolver,java.lang.String,java.util.List<java.lang.String>)java.util.Map<java.lang.String, java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.setStrings(android.content.ContentResolver,java.lang.String,java.util.Map<java.lang.String, java.lang.String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.resetToDefaults(android.content.ContentResolver,int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.registerMonitorCallback(android.content.ContentResolver,android.os.RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.provider.DeviceConfig.getProperty(java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getProperties(java.lang.String,java.lang.String...)android.provider.DeviceConfig.Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(java.lang.String,java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(java.lang.String,java.lang.String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(java.lang.String,java.lang.String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(java.lang.String,java.lang.String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(java.lang.String,java.lang.String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(android.provider.DeviceConfig$Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.print.PrintManager.addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)java.util.List<android.printservice.PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()java.util.List<android.printservice.recommendation.RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.util.StatsLog.logBinaryPushStateChanged(java.lang.String,long,int,int,long[])boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.addConfig(long,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.addConfiguration(long,byte[])boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfig(long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfiguration(long)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(android.app.PendingIntent,long,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(long,long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setFetchReportsOperation(android.app.PendingIntent,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setActiveConfigsChangedOperation(android.app.PendingIntent)long[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setDataFetchOperation(long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getReports(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getData(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getStatsMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getRegisteredExperimentIds()long[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.app.StatsManager.clearPullAtomCallback(int)void :: android.permission.REGISTER_STATS_PULL_ATOM
android.os.PowerWhitelistManager.addToWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(java.util.List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.RttManager.getRttCapabilities()android.net.wifi.RttManager.RttCapabilities :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.aware.WifiAwareManager.requestMacAddresses(int,java.util.List<java.lang.Integer>,android.net.wifi.aware.IWifiAwareMacAddressProvider)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiNetworkSuggestion$Builder.setCarrierId(int)android.net.wifi.WifiNetworkSuggestion.Builder :: android.permission.NETWORK_CARRIER_PROVISIONING
android.net.wifi.rtt.WifiRttManager.startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.cancelRanging(android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE :: allOf
android.net.wifi.WifiManager.getConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL :: allOf
android.net.wifi.WifiManager.getAllMatchingWifiConfigs(java.util.List<android.net.wifi.ScanResult>)java.util.List<android.util.Pair<android.net.wifi.WifiConfiguration,java.util.Map<java.lang.Integer,java.util.List<android.net.wifi.ScanResult>>>> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(java.util.List<android.net.wifi.ScanResult>)java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getMatchingOsuProviders(java.util.List<android.net.wifi.ScanResult>)java.util.Map<android.net.wifi.hotspot2.OsuProvider, java.util.List<android.net.wifi.ScanResult>> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getMatchingPasspointConfigsForOsuProviders(java.util.Set<android.net.wifi.hotspot2.OsuProvider>)java.util.Map<android.net.wifi.hotspot2.OsuProvider, android.net.wifi.hotspot2.PasspointConfiguration> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.registerNetworkRequestMatchCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterNetworkRequestMatchCallback(android.net.wifi.WifiManager$NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.addNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removeNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.getNetworkSuggestions()java.util.List<android.net.wifi.WifiNetworkSuggestion> :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.removePasspointConfiguration(java.lang.String)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_CARRIER_PROVISIONING :: anyOf
android.net.wifi.WifiManager.getPasspointConfigurations()java.util.List<android.net.wifi.hotspot2.PasspointConfiguration> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getWifiActivityEnergyInfoAsync(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiActivityEnergyInfoListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.getMatchingScanResults(java.util.List<android.net.wifi.WifiNetworkSuggestion>,java.util.List<android.net.wifi.ScanResult>)java.util.Map<android.net.wifi.WifiNetworkSuggestion, java.util.List<android.net.wifi.ScanResult>> :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.WifiManager.setScanAlwaysAvailable(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCountryCode()java.lang.String :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.updateInterfaceIpState(java.lang.String,int)void :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.startSoftAp(android.net.wifi.WifiConfiguration)boolean :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.startTetheredHotspot(android.net.wifi.SoftApConfiguration)boolean :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.stopSoftAp()boolean :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.startLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotCallback,android.os.Handler)void :: android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.net.wifi.WifiManager.startLocalOnlyHotspot(android.net.wifi.SoftApConfiguration,java.util.concurrent.Executor,android.net.wifi.WifiManager$LocalOnlyHotspotCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getSoftApConfiguration()android.net.wifi.SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.setSoftApConfiguration(android.net.wifi.SoftApConfiguration)boolean :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerSoftApCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterSoftApCallback(android.net.wifi.WifiManager$SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.connect(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.forget(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.disable(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.allowAutojoinGlobal(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoin(int,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.allowAutojoinPasspoint(java.lang.String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setMacRandomizationSettingPasspointEnabled(java.lang.String,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setPasspointMeteredOverride(java.lang.String,int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.disableEphemeralNetwork(java.lang.String)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.setVerboseLoggingEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.enableVerboseLogging(int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getCurrentNetwork()android.net.Network :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.retrieveBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreBackupData(byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.retrieveSoftApBackupData()byte[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSoftApBackupData(byte[])android.net.wifi.SoftApConfiguration :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.restoreSupplicantBackupData(byte[],byte[])void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,java.util.concurrent.Executor,android.net.wifi.hotspot2.ProvisioningCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.registerTrafficStateCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterTrafficStateCallback(android.net.wifi.WifiManager$TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getFactoryMacAddresses()java.lang.String[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setDeviceMobilityState(int)void :: android.permission.WIFI_SET_DEVICE_MOBILITY_STATE
android.net.wifi.WifiManager.startEasyConnectAsConfiguratorInitiator(java.lang.String,int,int,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.startEasyConnectAsEnrolleeInitiator(java.lang.String,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.stopEasyConnectSession()void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.addOnWifiUsabilityStatsListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.removeOnWifiUsabilityStatsListener(android.net.wifi.WifiManager$OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.updateWifiUsabilityScore(int,int,int)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.registerScanResultsCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager$ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.unregisterScanResultsCallback(android.net.wifi.WifiManager$ScanResultsCallback)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$SuggestionConnectionStatusListener)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.WifiManager.removeSuggestionConnectionStatusListener(android.net.wifi.WifiManager$SuggestionConnectionStatusListener)void :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiConnectedNetworkScorer(java.util.concurrent.Executor,android.net.wifi.WifiManager$WifiConnectedNetworkScorer)boolean :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.clearWifiConnectedNetworkScorer()void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.setScanThrottleEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.isScanThrottleEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setAutoWakeupEnabled(boolean)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.isAutoWakeupEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiScanner.getAvailableChannels(int)java.util.List<java.lang.Integer> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.setScanningEnabled(boolean)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.registerScanListener(java.util.concurrent.Executor,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.registerScanListener(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getSingleScanResults()java.util.List<android.net.wifi.ScanResult> :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startDisconnectedPnoScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$PnoSettings,java.util.concurrent.Executor,android.net.wifi.WifiScanner$PnoScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.stopPnoScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.startListening(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.stopListening(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.setWifiP2pChannels(android.net.wifi.p2p.WifiP2pManager$Channel,int,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.OVERRIDE_WIFI_CONFIG :: anyOf
android.net.wifi.p2p.WifiP2pManager.addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.OVERRIDE_WIFI_CONFIG :: anyOf
android.net.wifi.p2p.WifiP2pManager.setWfdInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager$Channel,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.OVERRIDE_WIFI_CONFIG :: anyOf
android.net.wifi.p2p.WifiP2pManager.requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK, android.permission.READ_WIFI_CREDENTIAL :: anyOf
android.net.wifi.p2p.WifiP2pManager.setMiracastMode(int)void :: android.permission.CONFIGURE_WIFI_DISPLAY
android.net.wifi.p2p.WifiP2pManager.factoryReset(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.requestOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$OngoingPeerInfoListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.setOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DeviceInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
com.android.server.content.ContentService.putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(java.lang.String,android.net.Uri,int)android.os.Bundle :: android.permission.CACHE_CONTENT
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.cancelBugreport()void :: android.permission.DUMP
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.inputmethod.InputMethodManagerService$ShellCommandImpl.onCommand(java.lang.String)int :: android.permission.DUMP, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS :: allOf
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(java.lang.String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.AnomalyReporter.initialize(android.content.Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsMessage.getSubmitPduEncodedMessage(boolean,java.lang.String,java.lang.String,int,int,int,int,int,int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()java.util.List<android.telephony.UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()android.telephony.UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()java.util.Map<java.lang.Integer, java.lang.Integer> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)android.telephony.ImsiEncryptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriInformation()android.telephony.CdmaEriInformation :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.MODIFY_PHONE_STATE :: allOf
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,java.lang.String,int)android.telephony.IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(java.util.List<java.lang.String>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()com.android.internal.telephony.CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()java.lang.String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEffectiveAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportPinResult(java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportPinResult(java.lang.String,java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getSubscriptionId(android.telecom.PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.getSimLocale()java.util.Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,java.util.List<android.service.carrier.CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()android.telephony.CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.isEmergencyAssistanceEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList()java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(java.lang.String,int,java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallForwarding(int)android.telephony.CallForwardingInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(android.telephony.CallForwardingInfo)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingStatus(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataAllowedDuringVoiceCall(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataAllowedInVoiceCall()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setAlwaysAllowMmsData(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPassword(java.lang.String,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE, android.permission.SEND_SMS :: allOf
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getMessagesFromIcc()java.util.List<android.telephony.SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager$FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(java.lang.String,java.lang.String)int :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getPremiumSmsConsent(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(java.lang.String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.createForSubscriptionId(int)android.telephony.ims.ImsMmTelManager :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isSupported(int,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.getFeatureState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.RcsUceAdapter.requestCapabilities(java.util.concurrent.Executor,android.net.Uri,android.telephony.ims.RcsUceAdapter$CapabilitiesCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerRcsAvailabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsRcsManager$AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterRcsAvailabilityCallback(android.telephony.ims.ImsRcsManager$AvailabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(java.lang.String)android.telephony.SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(java.lang.String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(java.util.List<java.lang.Integer>)android.os.ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(android.os.ParcelUuid)java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.location.LocationRequest.setLocationSettingsIgnored(boolean)android.location.LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setExtraLocationControllerPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationEnabledForUser(boolean,android.os.UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastLocation()android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.injectLocation(android.location.Location)boolean :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.location.LocationManager.isProviderPackage(java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.getProviderPackages(java.lang.String)java.util.List<java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION, android.permission.LOCATION_HARDWARE :: allOf
android.location.LocationManager.injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerAntennaInfoListener(java.util.concurrent.Executor,android.location.GnssAntennaInfo$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.ensureDefaultRingtones(android.content.Context)void :: android.permission.WRITE_SETTINGS
android.media.AudioRecordingConfiguration.getClientUid()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.tv.tuner.Tuner.openDescrambler()android.media.tv.tuner.Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()java.util.List<android.media.tv.TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getClientPid(java.lang.String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,java.lang.String,int,java.util.concurrent.Executor,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getDvbDeviceList()java.util.List<android.media.tv.DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(android.media.tv.DvbDeviceInfo,int)android.os.ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.AudioAttributes$Builder.setSystemUsage(int)android.media.AudioAttributes.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages(int[])void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)android.media.AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_AUDIO_ROUTING :: anyOf
android.media.AudioManager.requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(android.media.AudioAttributes)java.util.List<android.media.AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(int,java.lang.String,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(int,java.lang.String)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo,long)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioProductStrategies()java.util.List<android.media.audiopolicy.AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()java.util.List<android.media.audiopolicy.AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()android.media.soundtrigger.SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(java.util.UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(java.util.UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(java.util.UUID,int)android.hardware.soundtrigger.SoundTrigger.ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(java.util.UUID,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.AudioTrack$TunerConfiguration.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$TunerConfiguration.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$Builder.setTunerConfiguration(android.media.AudioTrack$TunerConfiguration)android.media.AudioTrack.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,java.util.Locale)android.media.voice.SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(android.media.voice.SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,java.util.Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.dumpAnalytics()java.util.List<android.telecom.ParcelableCallAnalytics> :: android.permission.DUMP
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getEphemeralApplications()java.util.List<android.content.pm.EphemeralApplicationInfo> :: android.permission.ACCESS_EPHEMERAL_APPS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.accounts.AccountManager.getAccounts()android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsAsUser(int)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByType(java.lang.String)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)android.accounts.AccountManagerFuture<java.lang.Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback<android.accounts.Account[]>,android.os.Handler)android.accounts.AccountManagerFuture<android.accounts.Account[]> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)void :: android.permission.GET_ACCOUNTS
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorTransform(android.view.Display$ColorTransform)void :: android.permission.CONFIGURE_DISPLAY_COLOR_TRANSFORM
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessageEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE, android.permission.WRITE_SECURE_SETTINGS :: allOf
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.content.ContentResolver.putCache(android.net.Uri,android.os.Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(android.net.Uri)android.os.Bundle :: android.permission.CACHE_CONTENT
android.content.rollback.RollbackManager.getAvailableRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.commitRollback(int,java.util.List<android.content.pm.VersionedPackage>,android.content.IntentSender)void :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(java.lang.String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.om.OverlayManager.setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.setEnabled(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)java.util.List<android.content.om.OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.ShortcutManager.getShareTargets(android.content.IntentFilter)java.util.List<android.content.pm.ShortcutManager.ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallback)void :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)android.content.pm.ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.GET_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(java.lang.String,int)java.util.Set<java.lang.String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(java.lang.String,int)java.util.List<android.content.pm.SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_EXISTING_PACKAGES, android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(java.lang.String,boolean)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions(java.lang.String[],int)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages(java.lang.String[])java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(java.lang.String,java.lang.CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(java.lang.String)java.lang.CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.CrossProfileApps.startActivity(android.content.ComponentName,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.installExistingPackage(java.lang.String,int,android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES, android.permission.INSTALL_EXISTING_PACKAGES :: allOf
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$Session.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller$SessionParams.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setTextOperationUser(android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.IpSecTransform.startNattKeepalive(android.net.IpSecTransform$NattKeepaliveCallback,int,android.os.Handler)void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform.stopNattKeepalive()void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform$Builder.buildTunnelModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)android.net.IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)android.net.Network :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,java.util.List<java.lang.String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getAlwaysOnVpnPackageForUser(int)java.lang.String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getVpnLockdownWhitelist(int)java.util.List<java.lang.String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)android.net.NetworkInfo :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getCaptivePortalServerUrl()java.lang.String :: android.permission.LOCAL_MAC_ADDRESS
android.net.ConnectivityManager.createNattKeepalive(android.net.Network,android.os.ParcelFileDescriptor,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)android.net.SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.createSocketKeepalive(android.net.Network,java.net.Socket,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)android.net.SocketKeepalive :: android.permission.PACKET_KEEPALIVE_OFFLOAD
android.net.ConnectivityManager.getTetherableIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.TETHER_PRIVILEGED, android.permission.WRITE_SETTINGS :: anyOf
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.registerTetheringEventCallback(java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.unregisterTetheringEventCallback(android.net.ConnectivityManager$OnTetheringEventCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLatestTetheringEntitlementResult(int,boolean,java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEntitlementResultListener)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network,boolean,boolean)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.setAcceptPartialConnectivity(android.net.Network,boolean,boolean)void :: android.permission.NETWORK_STACK
android.net.ConnectivityManager.setAvoidUnvalidated(android.net.Network)void :: android.permission.NETWORK_SETTINGS
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network,android.os.Bundle)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.ConnectivityManager.shouldAvoidBadWifi()boolean :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkRequest$Builder.setSignalStrength(int)android.net.NetworkRequest.Builder :: android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP
android.net.NetworkScoreManager.getActiveScorerPackage()java.lang.String :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()java.util.List<android.net.NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.requestScores(android.net.NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.IpSecManager$IpSecTunnelInterface.addAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager$IpSecTunnelInterface.removeAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)android.net.IpSecManager.IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface,int,android.net.IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.os.image.DynamicSystemManager$Session.write(byte[])boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(long,long)android.os.image.DynamicSystemManager.Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()android.gsi.GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.BugreportManager.startBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.BugreportParams,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.cancelBugreport()void :: android.permission.DUMP
android.os.DropBoxManager.getNextEntry(java.lang.String,long)android.os.DropBoxManager.Entry :: android.permission.READ_LOGS, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()java.util.List<android.os.IncidentManager.PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(java.lang.String)java.util.List<android.net.Uri> :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.getIncidentReport(android.net.Uri)android.os.IncidentManager.IncidentReport :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.deleteIncidentReports(android.net.Uri)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.PowerManager.dream(long)void :: android.permission.READ_DREAM_STATE, android.permission.WRITE_DREAM_STATE :: allOf
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.getPowerSaveModeTrigger()int :: android.permission.POWER_SAVER
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()android.os.Bundle :: android.permission.READ_SYSTEM_UPDATE_INFO, android.permission.RECOVERY :: anyOf
android.os.SystemUpdateManager.updateSystemUpdateInfo(android.os.PersistableBundle)void :: android.permission.RECOVERY
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.UserManager.getUserSwitchability()int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.isPrimaryUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isGuestUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.preCreateUser(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.getUsers()java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getUsers(boolean,boolean,boolean)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileParent(android.os.UserHandle)android.os.UserHandle :: android.permission.MANAGE_USERS
android.os.UserManager.removeUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon()android.graphics.Bitmap :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.permission.PermissionControllerManager.revokeRuntimePermissions(java.util.Map<java.lang.String, java.util.List<java.lang.String>>,boolean,int,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,java.lang.String,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY :: allOf
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnGetRuntimePermissionBackupCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.restoreRuntimePermissionBackup(byte[],android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.restoreDelayedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getAppPermissions(java.lang.String,android.permission.PermissionControllerManager$OnGetAppPermissionResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(java.lang.String,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(java.util.List<java.lang.String>,int,android.permission.PermissionControllerManager$OnCountPermissionAppsResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.setRuntimePermissionsVersion(int)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.service.oemlock.OemLockManager.getLockName()java.lang.String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.security.keystore.recovery.RecoverySession.newInstance(android.security.keystore.recovery.RecoveryController)android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],java.util.List<android.security.keystore.recovery.WrappedApplicationKey>)java.util.Map<java.lang.String, java.security.Key> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getInstance(android.content.Context)android.security.keystore.recovery.RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(android.content.Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()android.security.keystore.recovery.KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(android.app.PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()java.util.List<java.lang.String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[],byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(java.lang.String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()java.util.Map<java.lang.String, java.security.cert.X509Certificate> :: android.permission.RECOVER_KEYSTORE
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.util.StatsLog.logBinaryPushStateChanged(java.lang.String,long,int,int,long[])boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.util.StatsLog.logWatchdogRollbackOccurred(int,java.lang.String,long,int,java.lang.String)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.bluetooth.BluetoothHearingAid.getActiveDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getVolume()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.adjustVolume(int)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getHiSyncId(android.bluetooth.BluetoothDevice)long :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceSide(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceMode(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setBluetoothClass(android.bluetooth.BluetoothClass)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(android.bluetooth.BluetoothDevice,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setMetadata(int,byte[])boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothA2dp.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.face.FaceManager.authenticate(android.hardware.biometrics.CryptoObject,android.os.CancellationSignal,int,android.hardware.face.FaceManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge()long :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge()int :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],android.hardware.face.FaceManager$SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,android.hardware.face.FaceManager$GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.userActivity()void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.setActiveUser(int)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(android.hardware.face.Face,int,android.hardware.face.FaceManager$RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(android.hardware.face.FaceManager$LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.SensorPrivacyManager.setSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.usb.UsbPort.getStatus()android.hardware.usb.UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.grantPermission(android.hardware.usb.UsbDevice,java.lang.String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()java.util.List<android.hardware.usb.UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(android.hardware.usb.UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.radio.RadioManager.listModules(java.util.List<android.hardware.radio.RadioManager$ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.RadioTuner$Callback,android.os.Handler)android.hardware.radio.RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.concurrent.Executor,java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.location.ContextHubClient.sendMessageToNanoApp(android.hardware.location.NanoAppMessage)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubs()java.util.List<android.hardware.location.ContextHubInfo> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(android.hardware.location.ContextHubInfo,android.hardware.location.NanoAppBinary)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.enableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.disableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.queryNanoApps(android.hardware.location.ContextHubInfo)android.hardware.location.ContextHubTransaction<java.util.List<android.hardware.location.NanoAppState>> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback,java.util.concurrent.Executor)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.getBrightnessEvents()java.util.List<android.hardware.display.BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()java.util.List<android.hardware.display.AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setSaturationLevel(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setAppSaturationLevel(java.lang.String,int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.setActiveUser(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockout(byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.onConfirmDeviceCredentialSuccess()void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.onConfirmDeviceCredentialError(int,java.lang.String)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerCancellationCallback(android.hardware.biometrics.IBiometricConfirmDeviceCredentialCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setUseDefaultTitle()android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setFromConfirmDeviceCredential()android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int,android.hardware.biometrics.IBiometricConfirmDeviceCredentialCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(android.hardware.biometrics.BiometricPrompt$CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut()void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutService()java.lang.String :: android.permission.MANAGE_ACCESSIBILITY
android.view.WindowManager.getCurrentImeTouchRegion()android.graphics.Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()android.app.StatusBarManager.DisableInfo :: android.permission.STATUS_BAR
android.app.usage.UsageStatsManager.getAppStandbyBucket(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(java.lang.String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()java.util.Map<java.lang.String, java.lang.Integer> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(java.util.Map<java.lang.String, java.lang.Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS :: anyOf
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.switchUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(java.util.List<java.lang.String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.AppOpsManager.getPackagesForOps(java.lang.String[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps(int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,java.lang.String...)java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(java.lang.String,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,java.lang.String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(android.app.AppOpsManager$HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.ActivityTaskManager.setTaskWindowingMode(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeStack(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeStacksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.moveTopActivityToPinnedStack(int,android.graphics.Rect)boolean :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.moveTaskToStack(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeStack(int,android.graphics.Rect,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeTask(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeDockedStack(android.graphics.Rect,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.listAllStacks()java.lang.String :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(java.util.List<java.lang.String>)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setDisplayToSingleTaskInstance(int)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(java.lang.String)void :: android.permission.SET_TIME_ZONE
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(android.os.UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()android.content.ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(java.lang.String)java.lang.CharSequence :: android.permission.BACKUP
android.app.role.RoleControllerManager.isApplicationQualifiedForRole(java.lang.String,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleControllerManager.isRoleVisible(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHolders(java.lang.String)java.util.List<java.lang.String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)java.util.List<java.lang.String> :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.removeRoleHolderAsUser(java.lang.String,java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.clearRoleHoldersAsUser(java.lang.String,int,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MANAGE_ROLE_HOLDERS
android.app.role.RoleManager.addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.removeOnRoleHoldersChangedListenerAsUser(android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)void :: android.permission.OBSERVE_ROLE_HOLDERS
android.app.role.RoleManager.setRoleNamesFromController(java.util.List<java.lang.String>)void :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.addRoleHolderFromController(java.lang.String,java.lang.String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.removeRoleHolderFromController(java.lang.String,java.lang.String)boolean :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.role.RoleManager.getHeldRolesFromController(java.lang.String)java.util.List<java.lang.String> :: android.permission.PERMISSION_MANAGE_ROLES_FROM_CONTROLLER
android.app.StatsManager.addConfig(long,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.addConfiguration(long,byte[])boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfig(long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfiguration(long)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(android.app.PendingIntent,long,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(long,long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setFetchReportsOperation(android.app.PendingIntent,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setActiveConfigsChangedOperation(android.app.PendingIntent)long[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setDataFetchOperation(long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getReports(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getData(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getStatsMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getRegisteredExperimentIds()long[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setPullerCallback(int,android.os.IStatsPullerCallback)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.Activity.registerRemoteAnimations(android.view.RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.VrManager.registerVrStateCallback(java.util.concurrent.Executor,android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.unregisterVrStateCallback(android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()android.os.UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)void :: android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(android.content.ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Config.getString(android.content.ContentResolver,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.resetToDefaults(android.content.ContentResolver,int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.MediaStore.getContributedMediaSize(android.content.Context,java.lang.String,android.os.UserHandle)long :: android.permission.CLEAR_APP_USER_DATA
android.provider.MediaStore.deleteContributedMedia(android.content.Context,java.lang.String,android.os.UserHandle)void :: android.permission.CLEAR_APP_USER_DATA
android.provider.DeviceConfig.getProperty(java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(java.lang.String,java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(java.lang.String,java.lang.String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(java.lang.String,java.lang.String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(java.lang.String,java.lang.String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(java.lang.String,java.lang.String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertyChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertyChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.print.PrintManager.addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)java.util.List<android.printservice.PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()java.util.List<android.printservice.recommendation.RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.net.wifi.RttManager.getRttCapabilities()android.net.wifi.RttManager.RttCapabilities :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.rtt.WifiRttManager.startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.cancelRanging(android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE :: allOf
android.net.wifi.WifiManager.getConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL :: allOf
android.net.wifi.WifiManager.getAllMatchingWifiConfigs(java.util.List<android.net.wifi.ScanResult>)java.util.List<android.util.Pair<android.net.wifi.WifiConfiguration,java.util.Map<java.lang.Integer,java.util.List<android.net.wifi.ScanResult>>>> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getMatchingOsuProviders(java.util.List<android.net.wifi.ScanResult>)java.util.Map<android.net.wifi.hotspot2.OsuProvider, java.util.List<android.net.wifi.ScanResult>> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.getMatchingPasspointConfigsForOsuProviders(java.util.Set<android.net.wifi.hotspot2.OsuProvider>)java.util.Map<android.net.wifi.hotspot2.OsuProvider, android.net.wifi.hotspot2.PasspointConfiguration> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.registerNetworkRequestMatchCallback(android.net.wifi.WifiManager$NetworkRequestMatchCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterNetworkRequestMatchCallback(android.net.wifi.WifiManager$NetworkRequestMatchCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.addNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removeNetworkSuggestions(java.util.List<android.net.wifi.WifiNetworkSuggestion>)int :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.removePasspointConfiguration(java.lang.String)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getPasspointConfigurations()java.util.List<android.net.wifi.hotspot2.PasspointConfiguration> :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.notifyUserOfApBandConversion()void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerSoftApCallback(android.net.wifi.WifiManager$SoftApCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterSoftApCallback(android.net.wifi.WifiManager$SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.connect(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.forget(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.disable(int,android.net.wifi.WifiManager$ActionListener)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.disableEphemeralNetwork(java.lang.String)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_STACK :: anyOf
android.net.wifi.WifiManager.enableVerboseLogging(int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,java.util.concurrent.Executor,android.net.wifi.hotspot2.ProvisioningCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.registerTrafficStateCallback(android.net.wifi.WifiManager$TrafficStateCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterTrafficStateCallback(android.net.wifi.WifiManager$TrafficStateCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.getFactoryMacAddresses()java.lang.String[] :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.setDeviceMobilityState(int)void :: android.permission.WIFI_SET_DEVICE_MOBILITY_STATE
android.net.wifi.WifiManager.startEasyConnectAsConfiguratorInitiator(java.lang.String,int,int,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.startEasyConnectAsEnrolleeInitiator(java.lang.String,java.util.concurrent.Executor,android.net.wifi.EasyConnectStatusCallback)void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.stopEasyConnectSession()void :: android.permission.NETWORK_SETTINGS, android.permission.NETWORK_SETUP_WIZARD :: anyOf
android.net.wifi.WifiManager.addOnWifiUsabilityStatsListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.removeOnWifiUsabilityStatsListener(android.net.wifi.WifiManager$OnWifiUsabilityStatsListener)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiManager.updateWifiUsabilityScore(int,int,int)void :: android.permission.WIFI_UPDATE_USABILITY_STATS_SCORE
android.net.wifi.WifiScanner.setScanningEnabled(boolean)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.registerScanListener(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startDisconnectedPnoScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$PnoSettings,android.net.wifi.WifiScanner$PnoScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.WifiScanner.stopPnoScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.listen(android.net.wifi.p2p.WifiP2pManager$Channel,boolean,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
android.net.wifi.p2p.WifiP2pManager.factoryReset(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.p2p.WifiP2pManager.requestOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$OngoingPeerInfoListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.setOngoingPeerConfig(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DeviceInfoListener)void :: android.permission.ACCESS_FINE_LOCATION
com.android.server.content.ContentService.putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(java.lang.String,android.net.Uri,int)android.os.Bundle :: android.permission.CACHE_CONTENT
com.android.server.os.BugreportManagerServiceImpl.setListener(java.lang.String,android.os.IDumpstateListener,boolean)android.os.IDumpstateToken :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener)void :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.cancelBugreport()void :: android.permission.DUMP
com.android.server.inputmethod.InputMethodManagerService$ShellCommandImpl.onCommand(java.lang.String)int :: android.permission.DUMP, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS :: allOf
android.telephony.PhoneStateListener.onPreciseCallStateChanged(android.telephony.PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.AnomalyReporter.initialize(android.content.Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()java.util.List<android.telephony.UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()android.telephony.UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()java.util.Map<java.lang.Integer, java.lang.Integer> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedSubscriberIdsFromGroup()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.MODIFY_PHONE_STATE :: allOf
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,java.lang.String,int)android.telephony.IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()com.android.internal.telephony.CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSimLocale()java.util.Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()android.telephony.CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setRadioIndicationUpdateMode(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isEmergencyAssistanceEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList()java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setDataAllowedDuringVoiceCall(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataAllowedInVoiceCall()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE, android.permission.SEND_SMS :: allOf
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager$FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(java.lang.String,java.lang.String)int :: android.permission.READ_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(java.util.List<java.lang.Integer>)android.os.ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(android.os.ParcelUuid)java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.location.LocationRequest.setLocationSettingsIgnored(boolean)android.location.LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.injectLocation(android.location.Location)boolean :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.setLocationEnabledForUser(boolean,android.os.UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssCapabilities()android.location.GnssCapabilities :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()java.util.List<android.media.tv.TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_AUDIO_ROUTING :: anyOf
android.media.AudioManager.requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioProductStrategies()java.util.List<android.media.audiopolicy.AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()java.util.List<android.media.audiopolicy.AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$Session.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setRestrictedAcrossUser(boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)android.net.Network :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)android.net.NetworkInfo :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getCaptivePortalServerUrl()java.lang.String :: android.permission.LOCAL_MAC_ADDRESS
android.net.ConnectivityManager.getTetherableIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.TETHER_PRIVILEGED, android.permission.WRITE_SETTINGS :: anyOf
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMeteredForUid(int)boolean :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network,boolean,boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAvoidUnvalidated(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkScoreManager.getActiveScorerPackage()java.lang.String :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.disableScoring()void :: android.permission.REQUEST_NETWORK_SCORES
android.net.TrafficStats.setThreadStatsUid(int)void :: android.permission.UPDATE_DEVICE_STATS
android.net.TrafficStats.clearThreadStatsUid()void :: android.permission.UPDATE_DEVICE_STATS
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(java.lang.String,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PHONE_STATE
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.radio.RadioManager.listModules(java.util.List<android.hardware.radio.RadioManager$ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.RadioTuner$Callback,android.os.Handler)android.hardware.radio.RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.WindowManager.getCurrentImeTouchRegion()android.graphics.Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS :: anyOf
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.UPDATE_APP_OPS_STATS
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByFingerprintForUser(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllFingerprints()void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.VrManager.registerVrStateCallback(android.app.VrStateCallback,android.os.Handler)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.unregisterVrStateCallback(android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.getVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.getPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.print.PrintManager.addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)java.util.List<android.printservice.PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()java.util.List<android.printservice.recommendation.RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.net.wifi.RttManager.getRttCapabilities()android.net.wifi.RttManager.RttCapabilities :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getConnectionStatistics()android.net.wifi.WifiConnectionStatistics :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)boolean :: android.permission.TETHER_PRIVILEGED
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int)java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_AUDIO_ROUTING :: anyOf
android.media.AudioManager.requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.app.PendingIntent,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.telecom.RemoteConnection.onCallFilteringCompleted(android.telecom.Connection$CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getUserSelectedOutgoingPhoneAccount()android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts(boolean)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.getDefaultDialerPackage(android.os.UserHandle)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.setDefaultDialer(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE, android.permission.WRITE_SECURE_SETTINGS :: allOf
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCurrentTtyMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.startConference(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.telecom.TelecomManager.isInEmergencyCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectTimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.setConnectionStartElapsedRealtimeMillis(long)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Connection.onCallFilteringCompleted(android.telecom.Connection$CallFilteringCompletionInfo)void :: android.permission.READ_CONTACTS
android.telecom.CallScreeningService$CallResponse$Builder.setShouldScreenCallViaAudioProcessing(boolean)android.telecom.CallScreeningService.CallResponse.Builder :: android.permission.CAPTURE_AUDIO_OUTPUT
android.telecom.Conference.setConferenceState(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setCallDirection(int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.Conference.setAddress(android.net.Uri,int)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.PhoneAccount$Builder.setGroupId(java.lang.String)android.telecom.PhoneAccount.Builder :: android.permission.MODIFY_PHONE_STATE
android.content.ContentResolver.putCache(android.net.Uri,android.os.Bundle)void :: android.permission.CACHE_CONTENT
android.content.ContentResolver.getCache(android.net.Uri)android.os.Bundle :: android.permission.CACHE_CONTENT
android.content.rollback.RollbackManager.getAvailableRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks()java.util.List<android.content.rollback.RollbackInfo> :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.commitRollback(int,java.util.List<android.content.pm.VersionedPackage>,android.content.IntentSender)void :: android.permission.MANAGE_ROLLBACKS, android.permission.TEST_MANAGE_ROLLBACKS :: anyOf
android.content.rollback.RollbackManager.reloadPersistedData()void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.expireRollbackForPackage(java.lang.String)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.rollback.RollbackManager.blockRollbackManager(long)void :: android.permission.TEST_MANAGE_ROLLBACKS
android.content.AttributionSource.getRenouncedPermissions()java.util.Set<java.lang.String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.AttributionSource$Builder.setRenouncedPermissions(java.util.Set<java.lang.String>)android.content.AttributionSource.Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.ClipboardManager.setPrimaryClipAsPackage(android.content.ClipData,java.lang.String)void :: android.permission.SET_CLIP_SOURCE
android.content.ClipboardManager.getPrimaryClipSource()java.lang.String :: android.permission.SET_CLIP_SOURCE
android.content.om.OverlayManager.setEnabledExclusiveInCategory(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.setEnabled(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)java.util.List<android.content.om.OverlayInfo> :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.om.OverlayManager.invalidateCachesForOverlay(java.lang.String,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.ContextParams.getRenouncedPermissions()java.util.Set<java.lang.String> :: android.permission.RENOUNCE_PERMISSIONS
android.content.ContextParams$Builder.setRenouncedPermissions(java.util.Set<java.lang.String>)android.content.ContextParams.Builder :: android.permission.RENOUNCE_PERMISSIONS
android.content.pm.ShortcutManager.getShareTargets(android.content.IntentFilter)java.util.List<android.content.pm.ShortcutManager.ShareShortcutInfo> :: android.permission.MANAGE_APP_PREDICTIONS
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallback)void :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)android.content.pm.ApplicationInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.GET_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getWhitelistedRestrictedPermissions(java.lang.String,int)java.util.Set<java.lang.String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.content.pm.PackageManager.setAutoRevokeWhitelisted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.isAutoRevokeWhitelisted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getDeclaredSharedLibraries(java.lang.String,int)java.util.List<android.content.pm.SharedLibraryInfo> :: android.permission.ACCESS_SHARED_LIBRARIES
android.content.pm.PackageManager.queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_EXISTING_PACKAGES, android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setSyntheticAppDetailsActivityEnabled(java.lang.String,boolean)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)void :: android.permission.CHANGE_COMPONENT_ENABLED_STATE
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setDistractingPackageRestrictions(java.lang.String[],int)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.getUnsuspendablePackages(java.lang.String[])java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(java.lang.String,java.lang.CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(java.lang.String)java.lang.CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHoldLockToken()android.os.IBinder :: android.permission.INJECT_EVENTS
android.content.pm.PackageManager.setKeepUninstalledPackages(java.util.List<java.lang.String>)void :: android.permission.KEEP_UNINSTALLED_PACKAGES
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)void :: android.permission.INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.CrossProfileApps.startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.content.pm.CrossProfileApps.startActivity(android.content.ComponentName,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_PROFILES
android.content.pm.CrossProfileApps.setInteractAcrossProfilesAppOp(java.lang.String,int)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.CrossProfileApps.resetInteractAcrossProfilesAppOps(java.util.Collection<java.lang.String>,java.util.Set<java.lang.String>)void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.CrossProfileApps.clearInteractAcrossProfilesAppOps()void :: android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES, android.permission.INTERACT_ACROSS_USERS :: allOf
android.content.pm.LauncherApps.cacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.LauncherApps.uncacheShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle,int)void :: android.permission.ACCESS_SHORTCUTS
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.installExistingPackage(java.lang.String,int,android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES, android.permission.INSTALL_EXISTING_PACKAGES :: allOf
android.content.pm.PackageInstaller.uninstallExistingPackage(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$Session.getDataLoaderParams()android.content.pm.DataLoaderParams :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.addFile(int,java.lang.String,long,byte[],byte[])void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.removeFile(int,java.lang.String)void :: android.permission.USE_INSTALLER_V2
android.content.pm.PackageInstaller$Session.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.pm.PackageInstaller$SessionParams.setStaged()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setInstallAsApex()void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setDataLoaderParams(android.content.pm.DataLoaderParams)void :: android.permission.INSTALL_PACKAGES, android.permission.USE_INSTALLER_V2 :: allOf
android.content.pm.verify.domain.DomainVerificationManager.queryValidVerificationPackageNames()java.util.List<java.lang.String> :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationInfo(java.lang.String)android.content.pm.verify.domain.DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationStatus(java.util.UUID,java.util.Set<java.lang.String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationLinkHandlingAllowed(java.lang.String,boolean)void :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationUserSelection(java.util.UUID,java.util.Set<java.lang.String>,boolean)int :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.pm.verify.domain.DomainVerificationManager.getOwnersForDomain(java.lang.String)java.util.SortedSet<android.content.pm.verify.domain.DomainOwner> :: android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION
android.content.ContentProviderClient.setDetectNotResponding(long)void :: android.permission.REMOVE_TASKS
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)int :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcast(android.content.Intent,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverForAllUsers(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setTextOperationUser(android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.NetworkPolicyManager.registerSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getRestrictBackgroundStatus(int)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.isUidNetworkingBlocked(int,boolean)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.isUidRestrictedOnMeteredNetworks(int)boolean :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.getMultipathPreference(android.net.Network)int :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK
android.net.NetworkPolicyManager.registerNetworkPolicyCallback(java.util.concurrent.Executor,android.net.NetworkPolicyManager$NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.NetworkPolicyManager.unregisterNetworkPolicyCallback(android.net.NetworkPolicyManager$NetworkPolicyCallback)void :: android.permission.OBSERVE_NETWORK_POLICY
android.net.IpSecTransform$Builder.buildTunnelModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)android.net.IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.VpnManager.factoryReset()void :: android.permission.NETWORK_SETTINGS
android.net.VpnManager.setAlwaysOnVpnPackageForUser(int,java.lang.String,boolean,java.util.List<java.lang.String>)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getAlwaysOnVpnPackageForUser(int)java.lang.String :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.isVpnLockdownEnabled(int)boolean :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.VpnManager.getVpnLockdownAllowlist(int)java.util.List<java.lang.String> :: android.permission.CONTROL_ALWAYS_ON_VPN
android.net.EthernetManager.requestTetheredInterface(java.util.concurrent.Executor,android.net.EthernetManager$TetheredInterfaceCallback)android.net.EthernetManager.TetheredInterfaceRequest :: android.permission.NETWORK_STACK, android.net.NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkScoreManager.getActiveScorerPackage()java.lang.String :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()java.util.List<android.net.NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.requestScores(android.net.NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.requestScores(java.util.Collection<android.net.NetworkKey>)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.IpSecManager$IpSecTunnelInterface.addAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager$IpSecTunnelInterface.removeAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager$IpSecTunnelInterface.setUnderlyingNetwork(android.net.Network)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)android.net.IpSecManager.IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface,int,android.net.IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.vcn.VcnManager.addVcnUnderlyingNetworkPolicyListener(java.util.concurrent.Executor,android.net.vcn.VcnManager$VcnUnderlyingNetworkPolicyListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.getUnderlyingNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)android.net.vcn.VcnUnderlyingNetworkPolicy :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.addVcnNetworkPolicyChangeListener(java.util.concurrent.Executor,android.net.vcn.VcnManager$VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.removeVcnNetworkPolicyChangeListener(android.net.vcn.VcnManager$VcnNetworkPolicyChangeListener)void :: android.permission.NETWORK_FACTORY
android.net.vcn.VcnManager.applyVcnNetworkPolicy(android.net.NetworkCapabilities,android.net.LinkProperties)android.net.vcn.VcnNetworkPolicyResult :: android.permission.NETWORK_FACTORY
android.net.PacProxyManager.addPacProxyInstalledListener(java.util.concurrent.Executor,android.net.PacProxyManager$PacProxyInstalledListener)void :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_SETTINGS :: anyOf
android.net.PacProxyManager.removePacProxyInstalledListener(android.net.PacProxyManager$PacProxyInstalledListener)void :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_SETTINGS :: anyOf
android.net.PacProxyManager.setCurrentProxyScriptUrl(android.net.ProxyInfo)void :: android.permission.NETWORK_STACK, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_SETTINGS :: anyOf
android.os.BatteryStatsManager.getBatteryUsageStats()android.os.BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(android.os.BatteryUsageStatsQuery)android.os.BatteryUsageStats :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.getBatteryUsageStats(java.util.List<android.os.BatteryUsageStatsQuery>)java.util.List<android.os.BatteryUsageStats> :: android.permission.BATTERY_STATS
android.os.BatteryStatsManager.reportWifiRssiChanged(int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOn()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiOff()void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiState(int,java.lang.String)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStartedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStartedFromSource(android.os.WorkSource,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiBatchedScanStoppedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getCellularBatteryStats()android.os.connectivity.CellularBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.getWifiBatteryStats()android.os.connectivity.WifiBatteryStats :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockAcquiredFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportFullWifiLockReleasedFromSource(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiSupplicantStateChanged(int,boolean)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastEnabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiMulticastDisabled(android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportMobileRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportWifiRadioPowerState(boolean,int)void :: android.permission.UPDATE_DEVICE_STATS
android.os.BatteryStatsManager.reportNetworkInterfaceForTransports(java.lang.String,int[])void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.os.BatteryStatsManager.setChargerAcOnline(boolean,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.setBatteryLevel(int,boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.unplugBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.resetBattery(boolean)void :: android.permission.DEVICE_POWER
android.os.BatteryStatsManager.suspendBatteryInput()void :: android.permission.DEVICE_POWER
android.os.image.DynamicSystemManager$Session.setAshmem(android.os.ParcelFileDescriptor,long)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.submitFromAshmem(int)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.getAvbPublicKey(android.gsi.AvbPublicKey)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager$Session.commit()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(java.lang.String)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.createPartition(java.lang.String,long,boolean)android.os.image.DynamicSystemManager.Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.closePartition()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.finishInstallation()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.getInstallationProgress()android.gsi.GsiProgress :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.abort()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInUse()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isInstalled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.isEnabled()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.remove()boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean,boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.suggestScratchSize()long :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.bind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.unbind()void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.image.DynamicSystemClient.start(android.net.Uri,long,long)void :: android.permission.INSTALL_DYNAMIC_SYSTEM
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierApps()java.util.Set<java.lang.String> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedApps()java.util.Map<java.lang.String, java.util.List<java.lang.String>> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()java.util.Map<java.lang.String, java.util.List<android.os.CarrierAssociatedAppEntry>> :: android.permission.READ_CARRIER_APP_INFO
android.os.SystemConfigManager.getSystemPermissionUids(java.lang.String)int[] :: android.permission.GET_RUNTIME_PERMISSIONS
android.os.VibratorManager.setAlwaysOnEffect(int,java.lang.String,int,android.os.CombinedVibration,android.os.VibrationAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.VibratorManager.vibrate(android.os.CombinedVibration)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.vibrate(int,java.lang.String,android.os.CombinedVibration,java.lang.String,android.os.VibrationAttributes)void :: android.permission.VIBRATE
android.os.VibratorManager.cancel()void :: android.permission.VIBRATE
android.os.VibratorManager.cancel(int)void :: android.permission.VIBRATE
android.os.Vibrator.setAlwaysOnEffect(int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.media.AudioAttributes)boolean :: android.permission.VIBRATE_ALWAYS_ON
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.os.VibrationAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.Vibrator.cancel(int)void :: android.permission.VIBRATE
android.os.Vibrator.isVibrating()boolean :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.addVibratorStateListener(java.util.concurrent.Executor,android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.Vibrator.removeVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)void :: android.permission.ACCESS_VIBRATOR_STATE
android.os.storage.StorageManager.getManageSpaceActivityIntent(java.lang.String,int)android.app.PendingIntent :: android.permission.MANAGE_EXTERNAL_STORAGE
android.os.storage.StorageManager.getExternalStorageMountMode(int,java.lang.String)int :: android.permission.WRITE_MEDIA_STORAGE
android.os.BugreportManager.startBugreport(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.BugreportParams,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback)void :: android.permission.DUMP
android.os.BugreportManager.requestBugreport(android.os.BugreportParams,java.lang.CharSequence,java.lang.CharSequence)void :: android.permission.DUMP
android.os.DropBoxManager.getNextEntry(java.lang.String,long)android.os.DropBoxManager.Entry :: android.permission.READ_LOGS, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.cancelAuthorization(android.os.IncidentManager$AuthListener)void :: android.permission.REQUEST_INCIDENT_REPORT_APPROVAL
android.os.IncidentManager.getPendingReports()java.util.List<android.os.IncidentManager.PendingReport> :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.approveReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.denyReport(android.net.Uri)void :: android.permission.APPROVE_INCIDENT_REPORTS
android.os.IncidentManager.getIncidentReportList(java.lang.String)java.util.List<android.net.Uri> :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.getIncidentReport(android.net.Uri)android.os.IncidentManager.IncidentReport :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.deleteIncidentReports(android.net.Uri)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.BatteryManager.setChargingStateUpdateDelayMillis(int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.PowerManager.dream(long)void :: android.permission.READ_DREAM_STATE, android.permission.WRITE_DREAM_STATE :: allOf
android.os.PowerManager.reboot(java.lang.String)void :: android.permission.REBOOT
android.os.PowerManager.rebootSafeMode()void :: android.permission.REBOOT
android.os.PowerManager.setPowerSaveModeEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setFullPowerSavePolicy(android.os.BatterySaverPolicyConfig)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setDynamicPowerSaveHint(boolean,int)boolean :: android.permission.POWER_SAVER
android.os.PowerManager.setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setAdaptivePowerSaveEnabled(boolean)boolean :: android.permission.DEVICE_POWER, android.permission.POWER_SAVER :: anyOf
android.os.PowerManager.setBatteryDischargePrediction(java.time.Duration,boolean)void :: android.permission.BATTERY_PREDICTION, android.permission.DEVICE_POWER :: anyOf
android.os.PowerManager.isAmbientDisplayAvailable()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.suppressAmbientDisplay(java.lang.String,boolean)void :: android.permission.WRITE_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForToken(java.lang.String)boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressed()boolean :: android.permission.READ_DREAM_STATE
android.os.PowerManager.isAmbientDisplaySuppressedForTokenByApp(java.lang.String,int)boolean :: android.permission.READ_DREAM_STATE, android.permission.READ_DREAM_SUPPRESSION :: allOf
android.os.PowerManager.forceSuspend()boolean :: android.permission.DEVICE_POWER
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.prepareForUnattendedUpdate(android.content.Context,java.lang.String,android.content.IntentSender)void :: android.permission.RECOVERY, android.permission.REBOOT :: anyOf
android.os.RecoverySystem.clearPrepareForUnattendedUpdate(android.content.Context)void :: android.permission.RECOVERY, android.permission.REBOOT :: anyOf
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,java.lang.String)void :: android.permission.RECOVERY
android.os.RecoverySystem.isPreparedForUnattendedUpdate(android.content.Context)boolean :: android.permission.RECOVERY, android.permission.REBOOT :: anyOf
android.os.RecoverySystem.rebootAndApply(android.content.Context,java.lang.String,boolean)int :: android.permission.RECOVERY, android.permission.REBOOT :: anyOf
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()android.os.Bundle :: android.permission.READ_SYSTEM_UPDATE_INFO, android.permission.RECOVERY :: anyOf
android.os.SystemUpdateManager.updateSystemUpdateInfo(android.os.PersistableBundle)void :: android.permission.RECOVERY
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.os.UserManager.getUserSwitchability()int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.getUserSwitchability(android.os.UserHandle)int :: android.permission.READ_PHONE_STATE, android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: allOf
android.os.UserManager.getUserType()java.lang.String :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserName()java.lang.String :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserNameSet()boolean :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.isPrimaryUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isAdminUser()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isUserAdmin(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserOfType(java.lang.String)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isRestrictedProfile(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.canHaveRestrictedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.hasRestrictedProfiles()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getRestrictedProfileParent()android.os.UserHandle :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isGuestUser(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isGuestUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isProfile()boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isCloneProfile()boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isEphemeralUser()boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserEphemeral(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isUserRunning(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunning(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserRunningOrStopping(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.isUserUnlockingOrUnlocked(int)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.getUserInfo(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictions(android.os.UserHandle)android.os.Bundle :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.hasBaseUserRestriction(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.setUserRestriction(java.lang.String,boolean)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserRestriction(java.lang.String,boolean,android.os.UserHandle)void :: android.permission.MANAGE_USERS
android.os.UserManager.hasUserRestrictionForUser(java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.createUser(java.lang.String,java.lang.String,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.preCreateUser(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createGuest(android.content.Context,java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.findCurrentGuestUser()android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.createProfile(java.lang.String,java.lang.String,java.util.Set<java.lang.String>)android.os.UserHandle :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,int,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUser(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.createRestrictedProfile(java.lang.String)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getPreInstallableSystemPackages(java.lang.String)java.util.Set<java.lang.String> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.markGuestForDeletion(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.setUserEnabled(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.evictCredentialEncryptionKey(int)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserCount()int :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUsers()java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getAliveUsers()java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUsers(boolean)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUsers(boolean,boolean,boolean)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserHandles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.getPrimaryUser()android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreUsers()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreManagedProfiles(int,boolean)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.canAddMoreProfilesToUser(java.lang.String,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getProfiles(int)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.isSameProfileGroup(android.os.UserHandle,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isSameProfileGroup(int,int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getEnabledProfiles(int)java.util.List<android.content.pm.UserInfo> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getEnabledProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getAllProfiles()java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfiles(boolean)java.util.List<android.os.UserHandle> :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileIds(int,boolean)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getProfileIdsWithDisabled(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getEnabledProfileIds(int)int[] :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.getCredentialOwnerProfile(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.getProfileParent(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.getProfileParent(android.os.UserHandle)android.os.UserHandle :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.MODIFY_QUIET_MODE :: anyOf
android.os.UserManager.requestQuietModeEnabled(boolean,android.os.UserHandle,android.content.IntentSender)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isMediaSharedWithParent()boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.os.UserManager.removeUser(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUserEvenWhenDisallowed(int)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.removeUserOrSetEphemeral(int,boolean)int :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.os.UserManager.setUserName(int,java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserName(java.lang.String)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(int,android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserIcon(android.graphics.Bitmap)void :: android.permission.MANAGE_USERS
android.os.UserManager.getUserIcon(int)android.graphics.Bitmap :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.getUserIcon()android.graphics.Bitmap :: android.permission.MANAGE_USERS, android.permission.GET_ACCOUNTS_PRIVILEGED :: anyOf
android.os.UserManager.setDefaultGuestRestrictions(android.os.Bundle)void :: android.permission.MANAGE_USERS
android.os.UserManager.getDefaultGuestRestrictions()android.os.Bundle :: android.permission.MANAGE_USERS
android.os.UserManager.someUserHasSeedAccount(java.lang.String,java.lang.String)boolean :: android.permission.MANAGE_USERS
android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellLocationChanged(android.telephony.CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.PhoneStateListener.onCallStateChanged(int,java.lang.String)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCellInfoChanged(android.telephony.CellInfo)void :: android.permission.READ_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.PhoneStateListener.onPreciseCallStateChanged(android.telephony.PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onEmergencyNumberListChanged(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.PhoneStateListener.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.PhoneStateListener.onCallAttributesChanged(android.telephony.CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.PhoneStateListener.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.PhoneStateListener.onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)void :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.PhoneStateListener.onBarringInfoChanged(android.telephony.BarringInfo)void :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyRegistryManager.notifyCallStateChangedForAllSubscriptions(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyCallback$MessageWaitingIndicatorListener.onMessageWaitingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback$CallForwardingIndicatorListener.onCallForwardingIndicatorChanged(boolean)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback$CellLocationListener.onCellLocationChanged(android.telephony.CellLocation)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyCallback$CallStateListener.onCallStateChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback$CellInfoListener.onCellInfoChanged(android.telephony.CellInfo)void :: android.permission.READ_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyCallback$PreciseCallStateListener.onPreciseCallStateChanged(android.telephony.PreciseCallState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$CallDisconnectCauseListener.onCallDisconnectCauseChanged(int,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$ImsCallDisconnectCauseListener.onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$PreciseDataConnectionStateListener.onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$SrvccStateListener.onSrvccStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback$VoiceActivationStateListener.onVoiceActivationStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback$EmergencyNumberListListener.onEmergencyNumberListChanged(android.telephony.emergency.EmergencyNumber)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback$OutgoingEmergencyCallListener.onOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback$OutgoingEmergencySmsListener.onOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber,int)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyCallback$ActiveDataSubscriptionIdListener.onActiveDataSubscriptionIdChanged(int)void :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyCallback$RadioPowerStateListener.onRadioPowerStateChanged(int)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback$RegistrationFailedListener.onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)void :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyCallback$AllowedNetworkTypesListener.onAllowedNetworkTypesChanged(int,long)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyCallback$CallAttributesListener.onCallAttributesChanged(android.telephony.CallAttributes)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$BarringInfoListener.onBarringInfoChanged(android.telephony.BarringInfo)void :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyCallback$PhysicalChannelConfigListener.onPhysicalChannelConfigChanged(android.telephony.PhysicalChannelConfig)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$DataEnabledListener.onDataEnabledChanged(boolean,int)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyCallback$LinkCapacityEstimateChangedListener.onLinkCapacityEstimateChanged(android.telephony.LinkCapacityEstimate)void :: android.permission.READ_PRECISE_PHONE_STATE
android.permission.PermissionControllerService.getPrivilegesDescriptionStringForProfile(java.lang.String)java.lang.String :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionControllerManager.revokeRuntimePermissions(java.util.Map<java.lang.String, java.util.List<java.lang.String>>,boolean,int,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnRevokeRuntimePermissionsCallback)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,android.permission.AdminPermissionControlParams,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY :: allOf
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<byte[]>)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.stageAndApplyRuntimePermissionsBackup(byte[],android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionControllerManager.applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.RESTORE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionControllerManager.getAppPermissions(java.lang.String,android.permission.PermissionControllerManager$OnGetAppPermissionResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.revokeRuntimePermission(java.lang.String,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.countPermissionApps(java.util.List<java.lang.String>,int,android.permission.PermissionControllerManager$OnCountPermissionAppsResultCallback,android.os.Handler)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.getPermissionUsages(boolean,long,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnPermissionUsageResultCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.grantOrUpgradeDefaultRuntimePermissions(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionControllerManager.getPrivilegesDescriptionStringForProfile(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.CharSequence>)void :: android.permission.MANAGE_COMPANION_DEVICES
android.permission.PermissionControllerManager.notifyOneTimePermissionSessionTimeout(java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.permission.PermissionManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.GET_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.getAllowlistedRestrictedPermissions(java.lang.String,int)java.util.Set<java.lang.String> :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.addAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.removeAllowlistedRestrictedPermission(java.lang.String,java.lang.String,int)boolean :: android.permission.WHITELIST_RESTRICTED_PERMISSIONS
android.permission.PermissionManager.isAutoRevokeExempted(java.lang.String)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.permission.PermissionManager.setAutoRevokeExempted(java.lang.String,boolean)boolean :: android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS
android.permission.PermissionManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.permission.PermissionManager.getRuntimePermissionsVersion()int :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY, android.permission.UPGRADE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.setRuntimePermissionsVersion(int)void :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY, android.permission.UPGRADE_RUNTIME_PERMISSIONS :: anyOf
android.permission.PermissionManager.getIndicatorAppOpUsageData()java.util.List<android.permission.PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getIndicatorAppOpUsageData(boolean)java.util.List<android.permission.PermGroupUsage> :: android.permission.GET_APP_OPS_STATS
android.permission.PermissionManager.getAutoRevokeExemptionRequestedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.getAutoRevokeExemptionGrantedPackages()java.util.Set<java.lang.String> :: android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY
android.permission.PermissionManager.startOneTimePermissionSession(java.lang.String,long,int,int)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.PermissionManager.stopOneTimePermissionSession(java.lang.String)void :: android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromLuiApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.permission.LegacyPermissionManager.grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS_TO_TELEPHONY_DEFAULTS
android.speech.SpeechRecognizer.setTemporaryOnDeviceRecognizer(android.content.ComponentName)void :: android.permission.MANAGE_SPEECH_RECOGNITION
android.debug.AdbManager.isAdbWifiSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.debug.AdbManager.isAdbWifiQrSupported()boolean :: android.permission.MANAGE_DEBUGGING
android.graphics.fonts.FontManager.getFontConfig()android.text.FontConfig :: android.permission.UPDATE_FONTS
android.graphics.fonts.FontManager.updateFontFamily(android.graphics.fonts.FontFamilyUpdateRequest,int)int :: android.permission.UPDATE_FONTS
android.service.oemlock.OemLockManager.getLockName()java.lang.String :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.dataloader.DataLoaderService$FileSystemConnector.writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)void :: android.permission.INSTALL_PACKAGES
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector(java.lang.String,java.util.Locale,android.os.PersistableBundle,android.os.SharedMemory,android.service.voice.AlwaysOnHotwordDetector$Callback)android.service.voice.AlwaysOnHotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createHotwordDetector(android.os.PersistableBundle,android.os.SharedMemory,android.service.voice.HotwordDetector$Callback)android.service.voice.HotwordDetector :: android.permission.MANAGE_HOTWORD_DETECTION
android.service.voice.VoiceInteractionService.createKeyphraseModelManager()android.media.voice.KeyphraseModelManager :: android.permission.MANAGE_VOICE_KEYPHRASES
android.service.voice.HotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.triggerHardwareRecognitionEventForTest(int,int,boolean,int,int,int,boolean,android.media.AudioFormat,byte[])void :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.startRecognition(int)boolean :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.stopRecognition()boolean :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.setParameter(int,int)int :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.getParameter(int)int :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.AlwaysOnHotwordDetector.queryParameter(int)android.service.voice.AlwaysOnHotwordDetector.ModelParamRange :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.service.voice.SoftwareHotwordDetector.startRecognition()boolean :: android.permission.RECORD_AUDIO
android.service.voice.SoftwareHotwordDetector.stopRecognition()boolean :: android.permission.RECORD_AUDIO
android.security.FileIntegrityManager.isAppSourceCertificateTrusted(java.security.cert.X509Certificate)boolean :: android.permission.INSTALL_PACKAGES, android.permission.REQUEST_INSTALL_PACKAGES :: anyOf
android.security.keystore.recovery.RecoverySession.newInstance(android.security.keystore.recovery.RecoveryController)android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],java.util.List<android.security.keystore.recovery.WrappedApplicationKey>)java.util.Map<java.lang.String, java.security.Key> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getInstance(android.content.Context)android.security.keystore.recovery.RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(android.content.Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()android.security.keystore.recovery.KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(android.app.PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()java.util.List<java.lang.String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[],byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(java.lang.String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()java.util.Map<java.lang.String, java.security.cert.X509Certificate> :: android.permission.RECOVER_KEYSTORE
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.window.WindowOrganizer.applyTransaction(android.window.WindowContainerTransaction)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.applySyncTransaction(android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.startTransition(int,android.os.IBinder,android.window.WindowContainerTransaction)android.os.IBinder :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)int :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.registerTransitionPlayer(android.window.ITransitionPlayer)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.WindowOrganizer.getWindowOrganizerController()android.window.IWindowOrganizerController :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.registerOrganizer()java.util.List<android.window.TaskAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.createRootTask(int,int,android.os.IBinder)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.deleteRootTask(android.window.WindowContainerToken)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getChildTasks(android.window.WindowContainerToken,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getRootTasks(int,int[])java.util.List<android.app.ActivityManager.RunningTaskInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.getImeTarget(int)android.window.WindowContainerToken :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.setInterceptBackPressedOnTaskRoot(android.window.WindowContainerToken,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.TaskOrganizer.restartTaskTopActivityProcessIfVisible(android.window.WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.registerOrganizer(int)java.util.List<android.window.DisplayAreaAppearedInfo> :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.unregisterOrganizer()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.createTaskDisplayArea(int,int,java.lang.String)android.window.DisplayAreaAppearedInfo :: android.permission.MANAGE_ACTIVITY_TASKS
android.window.DisplayAreaOrganizer.deleteTaskDisplayArea(android.window.WindowContainerToken)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.uwb.RangingSession.start(android.os.PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.reconfigure(android.os.PersistableBundle)void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.stop()void :: android.permission.UWB_PRIVILEGED
android.uwb.RangingSession.close()void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.registerAdapterStateCallback(java.util.concurrent.Executor,android.uwb.UwbManager$AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.unregisterAdapterStateCallback(android.uwb.UwbManager$AdapterStateCallback)void :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.getSpecificationInfo()android.os.PersistableBundle :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.elapsedRealtimeResolutionNanos()long :: android.permission.UWB_PRIVILEGED
android.uwb.UwbManager.openRangingSession(android.os.PersistableBundle,java.util.concurrent.Executor,android.uwb.RangingSession$Callback)android.os.CancellationSignal :: android.permission.UWB_PRIVILEGED, android.permission.UWB_RANGING :: allOf
android.bluetooth.BluetoothHidDevice.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,java.util.concurrent.Executor,android.bluetooth.BluetoothHidDevice$Callback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.unregisterApp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.sendReport(android.bluetooth.BluetoothDevice,int,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.reportError(android.bluetooth.BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.getUserAppName()java.lang.String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidDevice.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getActiveDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.setVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getHiSyncId(android.bluetooth.BluetoothDevice)long :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHearingAid.getDeviceSide(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHearingAid.getDeviceMode(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableBLE()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.disable(boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH_CONNECT, android.permission.LOCAL_MAC_ADDRESS :: allOf
android.bluetooth.BluetoothAdapter.getName()java.lang.String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getNameLengthForAdvertise()int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.BluetoothAdapter.factoryReset()boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setBluetoothClass(android.bluetooth.BluetoothClass)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setIoCapability(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getLeIoCapability()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.setLeIoCapability(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int,long)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setScanMode(int)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.getDiscoveryEndMillis()long :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.removeActiveDevice(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothAdapter.setActiveDevice(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothAdapter.connectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothAdapter.disconnectAllEnabledProfiles(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.isHardwareTrackingFiltersAvailable()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getControllerActivityEnergyInfo(int)android.bluetooth.BluetoothActivityEnergyInfo :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.requestControllerActivityEnergyInfo(android.os.ResultReceiver)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.getMostRecentlyConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int,boolean,boolean)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommOn(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int,boolean,boolean)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingL2capOn(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capOn(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.readOutOfBandData()android.util.Pair<byte[], byte[]> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.generateLocalOobData(int,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$OobDataCallback)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(boolean,android.bluetooth.BluetoothAdapter$BluetoothStateChangeCallback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.BluetoothAdapter.listenUsingL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capChannel()android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAdapter.addOnMetadataChangedListener(android.bluetooth.BluetoothDevice,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.removeOnMetadataChangedListener(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.registerBluetoothConnectionCallback(java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$BluetoothConnectionCallback)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothAdapter.unregisterBluetoothConnectionCallback(android.bluetooth.BluetoothAdapter$BluetoothConnectionCallback)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getClient()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.isConnected(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothSap.getState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getClient()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.isConnected(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSap.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothSap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothSap.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothSap.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothGatt.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(android.bluetooth.BluetoothGattCallback,android.os.Handler)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.registerApp(android.bluetooth.BluetoothGattCallback,android.os.Handler,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.unregisterApp()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.connect(java.lang.Boolean,android.bluetooth.BluetoothGattCallback,android.os.Handler)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.disconnect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.connect()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setPreferredPhy(int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readPhy()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServices()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.discoverServiceByUuid(java.util.UUID)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readUsingCharacteristicUuid(java.util.UUID,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readDescriptor(android.bluetooth.BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.writeDescriptor(android.bluetooth.BluetoothGattDescriptor)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.beginReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.executeReliableWrite()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.abortReliableWrite(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.refresh()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.readRemoteRssi()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestMtu(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestConnectionPriority(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGatt.requestLeConnectionUpdate(int,int,int,int,int,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(android.bluetooth.BluetoothDevice)java.util.List<android.bluetooth.BluetoothHeadsetClientCall> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(android.bluetooth.BluetoothDevice)android.os.Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.acceptCall(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.holdCall(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.rejectCall(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.terminateCall(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHeadsetClientCall)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.dial(android.bluetooth.BluetoothDevice,java.lang.String)android.bluetooth.BluetoothHeadsetClientCall :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.sendDTMF(android.bluetooth.BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.setAudioRouteAllowed(android.bluetooth.BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getAudioRouteAllowed(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.connectAudio(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.disconnectAudio(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadsetClient.getCurrentAgFeatures(android.bluetooth.BluetoothDevice)android.os.Bundle :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getActiveDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.getGroupId(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothLeAudio.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothLeAudio.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getAlias()java.lang.String :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setAlias(java.lang.String)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBond(int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondOutOfBand(int,android.bluetooth.OobData,android.bluetooth.OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createBondInternal(int,android.bluetooth.OobData,android.bluetooth.OobData)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isBondingInitiatedLocally()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.canBondWithoutDialog()boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.sdpSearch(android.os.ParcelUuid)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin(byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPin(java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.cancelPairing()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.getPhonebookAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSilenceMode(boolean)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.isInSilenceMode()boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.getMessageAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMessageAccessPermission(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.getSimAccessPermission()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setSimAccessPermission(int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.createRfcommSocket(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createL2capSocket(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createInsecureL2capSocket(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createScoSocket()android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)android.bluetooth.BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int)android.bluetooth.BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int)android.bluetooth.BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int,android.os.Handler)android.bluetooth.BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,boolean,int,android.os.Handler)android.bluetooth.BluetoothGatt :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.createInsecureL2capChannel(int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothDevice.setMetadata(int,byte[])boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothDevice.getMetadata(int)byte[] :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.isConnected(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothMapClient.sendMessage(android.bluetooth.BluetoothDevice,java.util.Collection<android.net.Uri>,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.SEND_SMS :: allOf
android.bluetooth.BluetoothMapClient.sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.SEND_SMS :: allOf
android.bluetooth.BluetoothMapClient.getUnreadMessages(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.READ_SMS :: allOf
android.bluetooth.BluetoothMapClient.isUploadingSupported(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothMapClient.setMessageStatus(android.bluetooth.BluetoothDevice,java.lang.String,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.READ_SMS :: allOf
android.bluetooth.BluetoothPbap.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbap.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbap.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbap.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.close()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.registerCallback(android.bluetooth.BluetoothGattServerCallback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.registerCallback(android.bluetooth.BluetoothGattServerCallback,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.unregisterCallback()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.connect(android.bluetooth.BluetoothDevice,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.cancelConnection(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.setPreferredPhy(android.bluetooth.BluetoothDevice,int,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.readPhy(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.addService(android.bluetooth.BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.removeService(android.bluetooth.BluetoothGattService)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothGattServer.clearServices()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)android.os.ParcelFileDescriptor :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dp.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dp.setAvrcpAbsoluteVolume(int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getCodecStatus(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothCodecStatus :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setCodecConfigPreference(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothCodecConfig)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.disableOptionalCodecs(android.bluetooth.BluetoothDevice)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.enableDisableOptionalCodecs(android.bluetooth.BluetoothDevice,boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsSupported(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.isOptionalCodecsEnabled(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.setOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,int)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dp.getDynamicBufferSupport()int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dp.getBufferConstraints()android.bluetooth.BufferConstraints :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dp.setBufferLengthMillis(int,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPbapClient.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPbapClient.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.getAudioConfig(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothAudioConfig :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothA2dpSink.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothA2dpSink.isAudioPlaying(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothSocket.connect()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.bindListen()int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothSocket.requestMaximumTxDataLength()void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothPan.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED, android.permission.TETHER_PRIVILEGED :: allOf
android.bluetooth.BluetoothPan.isTetheringOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(android.bluetooth.le.AdvertiseCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertisingSetCallback,android.os.Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.AdvertisingSetCallback,android.os.Handler)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertisingSet(android.bluetooth.le.AdvertisingSetCallback)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(android.bluetooth.le.AdvertiseData,boolean)int :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(android.bluetooth.le.ScanResult,int,int,android.bluetooth.le.PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.registerSync(android.bluetooth.le.ScanResult,int,int,android.bluetooth.le.PeriodicAdvertisingCallback,android.os.Handler)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.PeriodicAdvertisingManager.unregisterSync(android.bluetooth.le.PeriodicAdvertisingCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.AdvertisingSet.enableAdvertising(boolean,int,int)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingData(android.bluetooth.le.AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setScanResponseData(android.bluetooth.le.AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setAdvertisingParameters(android.bluetooth.le.AdvertisingSetParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingParameters(android.bluetooth.le.PeriodicAdvertisingParameters)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingData(android.bluetooth.le.AdvertiseData)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.setPeriodicAdvertisingEnabled(boolean)void :: android.permission.BLUETOOTH_ADVERTISE
android.bluetooth.le.AdvertisingSet.getOwnAddress()void :: android.permission.BLUETOOTH_ADVERTISE, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback,android.app.PendingIntent,java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>>)int :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(java.util.List<android.bluetooth.le.TruncatedFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper.stopLeScan()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper.flushPendingBatchResults()void :: android.permission.BLUETOOTH_SCAN
android.bluetooth.le.BluetoothLeScanner.isHardwareResourcesAvailableForScan(android.bluetooth.le.ScanSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHeadset.isNoiseReductionSupported(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isVoiceRecognitionSupported(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startVoiceRecognition(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.stopVoiceRecognition(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioConnected(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setAudioRouteAllowed(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.getAudioRouteAllowed()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setForceScoAudio(boolean)void :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isAudioOn()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.connectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.disconnectAudio()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String)void :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.clccResponse(int,int,int,int,boolean,java.lang.String,int)void :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.MODIFY_PHONE_STATE :: allOf
android.bluetooth.BluetoothHeadset.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.setConnectionPolicy(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.getConnectionPolicy(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
android.bluetooth.BluetoothHidHost.virtualUnplug(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getProtocolMode(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setProtocolMode(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getReport(android.bluetooth.BluetoothDevice,byte,byte,int)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.sendData(android.bluetooth.BluetoothDevice,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.getIdleTime(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothHidHost.setIdleTime(android.bluetooth.BluetoothDevice,byte)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)android.bluetooth.BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback,boolean)android.bluetooth.BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback,int)android.bluetooth.BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothManager.openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback,int,boolean)android.bluetooth.BluetoothGattServer :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.getPlayerSettings(android.bluetooth.BluetoothDevice)android.bluetooth.BluetoothAvrcpPlayerSettings :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings)boolean :: android.permission.BLUETOOTH_CONNECT
android.bluetooth.BluetoothAvrcpController.sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)void :: android.permission.BLUETOOTH_CONNECT
android.hardware.face.FaceManager.authenticate(android.hardware.biometrics.CryptoObject,android.os.CancellationSignal,android.hardware.face.FaceManager$AuthenticationCallback,android.os.Handler,int,boolean)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.detectFace(android.os.CancellationSignal,android.hardware.face.FaceManager$FaceDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.enroll(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enroll(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[],android.view.Surface,boolean)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.enrollRemotely(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[])void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,int,android.hardware.face.FaceManager$GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.generateChallenge(int,android.hardware.face.FaceManager$GenerateChallengeCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.revokeChallenge(int,int,long)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.resetLockout(int,int,byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.setFeature(int,int,boolean,byte[],android.hardware.face.FaceManager$SetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getFeature(int,int,android.hardware.face.FaceManager$GetFeatureCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.remove(android.hardware.face.Face,int,android.hardware.face.FaceManager$RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.removeAll(int,android.hardware.face.FaceManager$RemovalCallback)void :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces(int)java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.getEnrolledFaces()java.util.List<android.hardware.face.Face> :: android.permission.MANAGE_BIOMETRIC
android.hardware.face.FaceManager.hasEnrolledTemplates()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.hasEnrolledTemplates(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.face.FaceManager.isHardwareDetected()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.getSensorPropertiesInternal()java.util.List<android.hardware.face.FaceSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.face.FaceManager.addLockoutResetCallback(android.hardware.face.FaceManager$LockoutResetCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported(java.util.Map<java.lang.String, android.hardware.camera2.params.SessionConfiguration>)boolean :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,int,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void :: android.permission.SYSTEM_CAMERA, android.permission.CAMERA :: allOf
android.hardware.camera2.CameraManager$AvailabilityCallback.onCameraOpened(java.lang.String,java.lang.String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager$AvailabilityCallback.onCameraClosed(java.lang.String)void :: android.permission.CAMERA_OPEN_CLOSE_LISTENER
android.hardware.camera2.CameraManager.injectCamera(java.lang.String,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraInjectionSession$InjectionStatusCallback)void :: android.permission.CAMERA_INJECT_EXTERNAL_CAMERA
android.hardware.camera2.impl.CameraExtensionSessionImpl.createCameraExtensionSession(android.hardware.camera2.CameraDevice,android.content.Context,android.hardware.camera2.params.ExtensionSessionConfiguration)android.hardware.camera2.impl.CameraExtensionSessionImpl :: android.permission.CAMERA
android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession(android.hardware.camera2.CameraDevice,android.content.Context,android.hardware.camera2.params.ExtensionSessionConfiguration)android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.getSensorProperties()java.util.List<android.hardware.biometrics.SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.createTestSession(int)android.hardware.biometrics.BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int,int)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.detectFingerprint(android.os.CancellationSignal,android.hardware.fingerprint.FingerprintManager$FingerprintDetectionCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback,int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,int,android.hardware.fingerprint.FingerprintManager$GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.generateChallenge(int,android.hardware.fingerprint.FingerprintManager$GenerateChallengeCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.revokeChallenge(int,long)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.resetLockout(int,int,byte[])void :: android.permission.RESET_FINGERPRINT_LOCKOUT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.removeAll(int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setUdfpsOverlayController(android.hardware.fingerprint.IUdfpsOverlayController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.setSidefpsController(android.hardware.fingerprint.ISidefpsController)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerDown(int,int,int,float,float)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onPointerUp(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.onUiReady(int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getSensorPropertiesInternal()java.util.List<android.hardware.fingerprint.FingerprintSensorPropertiesInternal> :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.fingerprint.FingerprintManager.addAuthenticatorsRegisteredCallback(android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.toggleAndFollowTvPower()void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.shouldHandleTvPowerKey()boolean :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVolumeControlEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVolumeControlEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiControlStatusChangeListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getUserCecSettings()java.util.List<java.lang.String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingStringValues(java.lang.String)java.util.List<java.lang.String> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingIntValues(java.lang.String)java.util.List<java.lang.Integer> :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecEnabled(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecEnabled()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(android.hardware.hdmi.HdmiControlManager$CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHdmiCecEnabledChangeListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHdmiCecEnabledChangeListener(android.hardware.hdmi.HdmiControlManager$CecSettingChangeListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setHdmiCecVersion(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getHdmiCecVersion()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerControlMode(java.lang.String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerControlMode()java.lang.String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setPowerStateChangeOnActiveSourceLost(java.lang.String)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getPowerStateChangeOnActiveSourceLost()java.lang.String :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setSystemAudioModeMuting(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getSystemAudioModeMuting()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvWakeOnOneTouchPlay(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvWakeOnOneTouchPlay()int :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.setTvSendStandbyOnSleep(int)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.getTvSendStandbyOnSleep()int :: android.permission.HDMI_CEC
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,java.util.concurrent.Executor,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addSensorPrivacyListener(int,int,java.util.concurrent.Executor,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeSensorPrivacyListener(int,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isSensorPrivacyEnabled(int,int)boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacy(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setSensorPrivacyForProfileGroup(int,int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.suppressSensorPrivacyReminders(int,boolean,int)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.setAllSensorPrivacy(boolean)void :: android.permission.MANAGE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.addAllSensorPrivacyListener(android.hardware.SensorPrivacyManager$OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.removeAllSensorPrivacyListener(android.hardware.SensorPrivacyManager$OnAllSensorPrivacyChangedListener)void :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.SensorPrivacyManager.isAllSensorPrivacyEnabled()boolean :: android.permission.OBSERVE_SENSOR_PRIVACY
android.hardware.usb.UsbPort.getStatus()android.hardware.usb.UsbPortStatus :: android.permission.MANAGE_USB
android.hardware.usb.UsbPort.setRoles(int,int)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.grantPermission(android.hardware.usb.UsbDevice,java.lang.String)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.setCurrentFunctions(long)void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getCurrentFunctions()long :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbBandwidthMbps()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getGadgetHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getUsbHalVersion()int :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.resetUsbGadget()void :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableUsbDataSignal(boolean)boolean :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.getPorts()java.util.List<android.hardware.usb.UsbPort> :: android.permission.MANAGE_USB
android.hardware.usb.UsbManager.enableContaminantDetection(android.hardware.usb.UsbPort,boolean)void :: android.permission.MANAGE_USB
android.hardware.radio.RadioManager.listModules(java.util.List<android.hardware.radio.RadioManager$ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.RadioTuner$Callback,android.os.Handler)android.hardware.radio.RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.concurrent.Executor,java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.location.ContextHubClient.sendMessageToNanoApp(android.hardware.location.NanoAppMessage)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.getContextHubs()java.util.List<android.hardware.location.ContextHubInfo> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.loadNanoApp(android.hardware.location.ContextHubInfo,android.hardware.location.NanoAppBinary)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.unloadNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.enableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.disableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.queryNanoApps(android.hardware.location.ContextHubInfo)android.hardware.location.ContextHubTransaction<java.util.List<android.hardware.location.NanoAppState>> :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.content.Context,android.hardware.location.ContextHubInfo,java.util.concurrent.Executor,android.hardware.location.ContextHubClientCallback)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback,java.util.concurrent.Executor)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.content.Context,android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.location.ContextHubManager.createClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)android.hardware.location.ContextHubClient :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_CONTEXT_HUB :: anyOf
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.setUserDisabledHdrTypes(int[])void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.setAreUserDisabledHdrTypesAllowed(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.display.DisplayManager.getBrightnessEvents()java.util.List<android.hardware.display.BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()java.util.List<android.hardware.display.AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.setBrightness(int,float)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightness(int)float :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.setShouldAlwaysRespectAppRequestedMode(boolean)void :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.shouldAlwaysRespectAppRequestedMode()boolean :: android.permission.OVERRIDE_DISPLAY_MODE_REQUESTS
android.hardware.display.DisplayManager.setRefreshRateSwitchingType(int)void :: android.permission.MODIFY_REFRESH_RATE_SWITCHING_TYPE
android.hardware.display.ColorDisplayManager.setNightDisplayActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayColorTemperature(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getNightDisplayAutoMode()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayAutoMode(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomStartTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setNightDisplayCustomEndTime(java.time.LocalTime)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isDeviceColorManaged()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setSaturationLevel(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.isSaturationActivated()boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setAppSaturationLevel(java.lang.String,int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setDisplayWhiteBalanceEnabled(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setReduceBrightColorsActivated(boolean)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.setReduceBrightColorsStrength(int)boolean :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.display.ColorDisplayManager.getTransformCapabilities()int :: android.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS
android.hardware.biometrics.BiometricManager$Strings.getButtonLabel()java.lang.CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager$Strings.getPromptMessage()java.lang.CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager$Strings.getSettingName()java.lang.CharSequence :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.getSensorProperties()java.util.List<android.hardware.biometrics.SensorProperties> :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.createTestSession(int)android.hardware.biometrics.BiometricTestSession :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.getUiPackage()java.lang.String :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate()int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int)int :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.canAuthenticate(int,int)int :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.getStrings(int)android.hardware.biometrics.BiometricManager.Strings :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricManager.hasEnrolledBiometrics(int)boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.invalidateAuthenticatorIds(int,int,android.hardware.biometrics.IInvalidationCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.resetLockoutTimeBound(android.os.IBinder,java.lang.String,int,int,byte[])void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setUseDefaultTitle()android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setTextForDeviceCredential(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setAllowedSensorIds(java.util.List<java.lang.Integer>)android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.TEST_BIOMETRIC, android.permission.USE_BIOMETRIC_INTERNAL :: anyOf
android.hardware.biometrics.BiometricPrompt$Builder.setAllowBackgroundAuthentication(boolean)android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.TEST_BIOMETRIC, android.permission.USE_BIOMETRIC_INTERNAL :: anyOf
android.hardware.biometrics.BiometricPrompt.shouldUseDefaultTitle()boolean :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUserForOperation(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int,long)long :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticate(android.hardware.biometrics.BiometricPrompt$CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.setTestHalEnabled(boolean)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.startEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.finishEnroll(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.acceptAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.rejectAuthentication(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyAcquired(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.notifyError(int,int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.cleanupInternalState(int)void :: android.permission.TEST_BIOMETRIC
android.hardware.biometrics.BiometricTestSession.close()void :: android.permission.TEST_BIOMETRIC
android.hardware.lights.SystemLightsManager.getLights()java.util.List<android.hardware.lights.Light> :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.getLightState(android.hardware.lights.Light)android.hardware.lights.LightState :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession()android.hardware.lights.LightsManager.LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager.openSession(int)android.hardware.lights.LightsManager.LightsSession :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager$SystemLightsSession.requestLights(android.hardware.lights.LightsRequest)void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.lights.SystemLightsManager$SystemLightsSession.close()void :: android.permission.CONTROL_DEVICE_LIGHTS
android.hardware.soundtrigger.SoundTrigger.listModulesAsOriginator(java.util.ArrayList<android.hardware.soundtrigger.SoundTrigger$ModuleProperties>,android.media.permission.Identity)int :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.hardware.soundtrigger.SoundTrigger.listModulesAsMiddleman(java.util.ArrayList<android.hardware.soundtrigger.SoundTrigger$ModuleProperties>,android.media.permission.Identity,android.media.permission.Identity)int :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsMiddleman(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler,android.media.permission.Identity,android.media.permission.Identity)android.hardware.soundtrigger.SoundTriggerModule :: android.permission.SOUNDTRIGGER_DELEGATE_IDENTITY
android.hardware.soundtrigger.SoundTrigger.attachModuleAsOriginator(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler,android.media.permission.Identity)android.hardware.soundtrigger.SoundTriggerModule :: android.permission.RECORD_AUDIO, android.permission.CAPTURE_AUDIO_HOTWORD :: allOf
android.hardware.input.InputManager.setMaximumObscuringOpacityForTouch(float)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.input.InputManager.setBlockUntrustedTouchesMode(android.content.Context,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.hardware.devicestate.DeviceStateManager.requestState(android.hardware.devicestate.DeviceStateRequest,java.util.concurrent.Executor,android.hardware.devicestate.DeviceStateRequest$Callback)void :: android.permission.CONTROL_DEVICE_STATE
android.hardware.devicestate.DeviceStateManager.cancelRequest(android.hardware.devicestate.DeviceStateRequest)void :: android.permission.CONTROL_DEVICE_STATE
android.apphibernation.AppHibernationManager.isHibernatingForUser(java.lang.String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingForUser(java.lang.String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.isHibernatingGlobally(java.lang.String)boolean :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.setHibernatingGlobally(java.lang.String,boolean)void :: android.permission.MANAGE_APP_HIBERNATION
android.apphibernation.AppHibernationManager.getHibernatingPackagesForUser()java.util.List<java.lang.String> :: android.permission.MANAGE_APP_HIBERNATION
android.se.omapi.Reader.reset()boolean :: android.permission.SECURE_ELEMENT_PRIVILEGED_OPERATION
android.view.translation.UiTranslationManager.startTranslation(android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List<android.view.autofill.AutofillId>,android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.startTranslation(android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List<android.view.autofill.AutofillId>,android.app.assist.ActivityId,android.view.translation.UiTranslationSpec)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.finishTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.pauseTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.translation.UiTranslationManager.resumeTranslation(android.app.assist.ActivityId)void :: android.permission.MANAGE_UI_TRANSLATION
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.displayhash.DisplayHashManager.setDisplayHashThrottlingEnabled(boolean)void :: android.permission.READ_FRAME_BUFFER
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut()void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.performAccessibilityShortcut(java.lang.String)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.registerSystemAction(android.app.RemoteAction,int)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.unregisterSystemAction(int)void :: android.permission.MANAGE_ACCESSIBILITY
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.notifyAccessibilityButtonClicked(int,java.lang.String)void :: android.permission.STATUS_BAR_SERVICE
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutTargets(int)java.util.List<java.lang.String> :: android.permission.MANAGE_ACCESSIBILITY
android.view.SurfaceControlHdrLayerInfoListener.register(android.os.IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregister(android.os.IBinder)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.SurfaceControlHdrLayerInfoListener.unregisterAll()void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.WindowManager.getCurrentImeTouchRegion()android.graphics.Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.WindowManager$LayoutParams.setSystemApplicationOverlay(boolean)void :: android.permission.SYSTEM_APPLICATION_OVERLAY
android.view.contentcapture.ContentCaptureManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setTemporaryService(int,java.lang.String,int)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.contentcapture.ContentCaptureManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_CAPTURE
android.view.inputmethod.InputMethodManager.getInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.getEnabledInputMethodListAsUser(int)java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.view.inputmethod.InputMethodManager.showInputMethodPickerFromSystem(boolean,int)void :: android.permission.WRITE_SECURE_SETTINGS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.getBrightnessInfo()android.hardware.display.BrightnessInfo :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.view.Window.setHideOverlayWindows(boolean)void :: android.permission.HIDE_OVERLAY_WINDOWS
android.app.KeyguardManager.setPrivateNotificationsAllowed(boolean)void :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager.getPrivateNotificationsAllowed()boolean :: android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.isValidLockPasswordComplexity(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.getMinLockLength(boolean,int)int :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int)boolean :: android.permission.SET_INITIAL_LOCK
android.app.KeyguardManager.setLock(int,byte[],int,byte[])boolean :: android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS, android.permission.ACCESS_KEYGUARD_SECURE_STORAGE :: anyOf
android.app.KeyguardManager.checkLock(int,byte[])boolean :: android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS, android.permission.ACCESS_KEYGUARD_SECURE_STORAGE :: anyOf
android.app.StatusBarManager.collapsePanels()void :: android.permission.STATUS_BAR
android.app.StatusBarManager.togglePanel()void :: android.permission.STATUS_BAR
android.app.StatusBarManager.handleSystemKey(int)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setDisabledForSetup(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.setExpansionDisabledForSimNetworkLock(boolean)void :: android.permission.STATUS_BAR
android.app.StatusBarManager.getDisableInfo()android.app.StatusBarManager.DisableInfo :: android.permission.STATUS_BAR
android.app.DownloadManager.onMediaStoreDownloadsDeleted(android.util.LongSparseArray<java.lang.String>)void :: android.permission.WRITE_MEDIA_STORAGE
android.app.usage.StorageStatsManager.queryCratesForUser(java.util.UUID,android.os.UserHandle)java.util.Collection<android.os.storage.CrateInfo> :: android.permission.MANAGE_CRATES
android.app.usage.NetworkStatsManager.registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.app.usage.NetworkStatsManager.unregisterNetworkStatsProvider(android.net.netstats.provider.NetworkStatsProvider)void :: android.permission.NETWORK_STATS_PROVIDER, NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK :: anyOf
android.app.usage.NetworkStatsManager.notifyNetworkStatus(android.net.Network,java.util.List<android.net.NetworkStateSnapshot>,java.lang.String,java.util.List<android.net.UnderlyingNetworkInfo>)void :: NetworkStack.PERMISSION_MAINLINE_NETWORK_STACK, android.permission.NETWORK_STACK :: anyOf
android.app.usage.UsageStatsManager.getAppStandbyBucket(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(java.lang.String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()java.util.Map<java.lang.String, java.lang.Integer> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(java.util.Map<java.lang.String, java.lang.Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterUsageSessionObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver(int)void :: android.permission.SUSPEND_APPS, android.permission.OBSERVE_APP_USAGE :: allOf
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.usage.UsageStatsManager.onCarrierPrivilegedAppsChanged()void :: android.permission.BIND_CARRIER_SERVICES
android.app.usage.UsageStatsManager.getLastTimeAnyComponentUsed(java.lang.String)long :: android.permission.INTERACT_ACROSS_USERS, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.NotificationManager.setNotificationListenerAccessGranted(android.content.ComponentName,boolean,boolean)void :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.getEnabledNotificationListeners()java.util.List<android.content.ComponentName> :: android.permission.MANAGE_NOTIFICATION_LISTENERS
android.app.NotificationManager.setToastRateLimitingEnabled(boolean)void :: android.permission.MANAGE_TOAST_RATE_LIMITING
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS :: anyOf
android.app.ActivityManager.getUidProcessState(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidProcessCapabilities(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.switchUser(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.app.ActivityManager.startProfile(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.stopProfile(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.updateMccMncConfiguration(java.lang.String,java.lang.String)boolean :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.stopUser(int,boolean)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.ActivityManager.scheduleApplicationInfoChanged(java.util.List<java.lang.String>,int)void :: android.permission.CHANGE_CONFIGURATION
android.app.ActivityManager.isProfileForeground(android.os.UserHandle)boolean :: android.permission.MANAGE_USERS, android.permission.CREATE_USERS :: anyOf
android.app.ActivityManager.killProcessesWhenImperceptible(int[],java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.addHomeVisibilityListener(java.util.concurrent.Executor,android.app.HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.removeHomeVisibilityListener(android.app.HomeVisibilityListener)void :: android.permission.SET_ACTIVITY_WATCHER
android.app.ActivityManager.resetAppErrors()void :: android.permission.RESET_APP_ERRORS
android.app.ActivityManager.waitForBroadcastIdle()void :: android.permission.DUMP
android.app.people.PeopleManager.isConversation(java.lang.String,java.lang.String)boolean :: android.permission.READ_PEOPLE_DATA
android.app.time.TimeManager.getTimeZoneCapabilitiesAndConfig()android.app.time.TimeZoneCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.getTimeCapabilitiesAndConfig()android.app.time.TimeCapabilitiesAndConfig :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeConfiguration(android.app.time.TimeConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.updateTimeZoneConfiguration(android.app.time.TimeZoneConfiguration)boolean :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.addTimeZoneDetectorListener(java.util.concurrent.Executor,android.app.time.TimeManager$TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.removeTimeZoneDetectorListener(android.app.time.TimeManager$TimeZoneDetectorListener)void :: android.permission.MANAGE_TIME_AND_ZONE_DETECTION
android.app.time.TimeManager.suggestExternalTime(android.app.time.ExternalTimeSuggestion)void :: android.permission.SUGGEST_EXTERNAL_TIME
android.app.DreamManager.startDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.stopDream()void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.setActiveDream(android.content.ComponentName)void :: android.permission.WRITE_DREAM_STATE
android.app.DreamManager.isDreaming()boolean :: android.permission.READ_DREAM_STATE
android.app.AppOpsManager.getPackagesForOps(java.lang.String[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getPackagesForOps(int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,java.lang.String...)java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer<android.app.AppOpsManager$HistoricalOps>)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.reloadNonHistoricalState()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(java.lang.String,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,java.lang.String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.resetPackageOpsNoHistory(java.lang.String)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.setHistoryParameters(int,long,int)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.offsetHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.addHistoricalOps(android.app.AppOpsManager$HistoricalOps)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.resetHistoryParameters()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.clearHistory()void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.rebootHistory(long)void :: android.permission.MANAGE_APPOPS
android.app.AppOpsManager.collectRuntimeAppOpAccessMessage()android.app.RuntimeAppOpAccessMessage :: android.permission.GET_APP_OPS_STATS
android.app.ActivityTaskManager.removeRootTasksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeRootTasksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeAllVisibleRecentTasks()void :: android.permission.REMOVE_TASKS
android.app.ActivityTaskManager.startSystemLockTaskMode(int)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.stopSystemLockTaskMode()void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.moveTaskToRootTask(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.resizeTask(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.clearLaunchParamsForPackages(java.util.List<java.lang.String>)void :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.ActivityTaskManager.removeTask(int)boolean :: android.permission.MANAGE_ACTIVITY_TASKS
android.app.WallpaperManager.getDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.wallpaperSupportsWcg(int)boolean :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST, android.permission.START_ACTIVITIES_FROM_BACKGROUND, android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND :: anyOf
android.app.BroadcastOptions.setTemporaryAppAllowlist(long,int,int,java.lang.String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST, android.permission.START_ACTIVITIES_FROM_BACKGROUND, android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND :: anyOf
android.app.BroadcastOptions.setBackgroundActivityStartsAllowed(boolean)void :: android.permission.START_ACTIVITIES_FROM_BACKGROUND
android.app.timezonedetector.TimeZoneDetector.suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timezonedetector.TimeZoneDetector.suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.compat.CompatChanges.isChangeEnabled(long,java.lang.String,android.os.UserHandle)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG, android.permission.LOG_COMPAT_CHANGE :: allOf
android.app.compat.CompatChanges.isChangeEnabled(long,int)boolean :: android.permission.READ_COMPAT_CHANGE_CONFIG, android.permission.LOG_COMPAT_CHANGE :: allOf
android.app.compat.CompatChanges.putPackageOverrides(java.lang.String,java.util.Map<java.lang.Long, android.app.compat.PackageOverride>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.compat.CompatChanges.removePackageOverrides(java.lang.String,java.util.Set<java.lang.Long>)void :: android.permission.OVERRIDE_COMPAT_CHANGE_CONFIG_ON_RELEASE_BUILD
android.app.contentsuggestions.ContentSuggestionsManager.resetTemporaryService(int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setTemporaryService(int,java.lang.String,int)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.contentsuggestions.ContentSuggestionsManager.setDefaultServiceEnabled(int,boolean)void :: android.permission.MANAGE_CONTENT_SUGGESTIONS
android.app.timedetector.TimeDetector.suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)void :: android.permission.SUGGEST_TELEPHONY_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestManualTime(android.app.timedetector.ManualTimeSuggestion)boolean :: android.permission.SUGGEST_MANUAL_TIME_AND_ZONE
android.app.timedetector.TimeDetector.suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)void :: android.permission.SET_TIME
android.app.timedetector.TimeDetector.suggestGnssTime(android.app.timedetector.GnssTimeSuggestion)void :: android.permission.SET_TIME
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(android.os.UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransportComponent()android.content.ComponentName :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)void :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.setAncestralSerialNumber(long)void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntentLabel(java.lang.String)java.lang.CharSequence :: android.permission.BACKUP
android.app.backup.BackupManager.excludeKeysFromRestore(java.lang.String,java.util.List<java.lang.String>)void :: android.permission.BACKUP
android.app.Activity.registerRemoteAnimations(android.view.RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.Activity.unregisterRemoteAnimations()void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.ActivityOptions.makeCustomTaskAnimation(android.content.Context,int,int,android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener,android.app.ActivityOptions$OnAnimationFinishedListener)android.app.ActivityOptions :: android.permission.START_TASKS_FROM_RECENTS
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter,android.window.IRemoteTransition)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.ActivityOptions.makeRemoteTransition(android.window.IRemoteTransition)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.UiModeManager.enableCarMode(int,int)void :: android.permission.ENTER_CAR_MODE_PRIORITIZED
android.app.UiModeManager.requestProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTION
android.app.UiModeManager.releaseProjection(int)boolean :: android.permission.TOGGLE_AUTOMOTIVE_PROJECTION
android.app.UiModeManager.getProjectingPackages(int)java.util.Set<java.lang.String> :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.getActiveProjectionTypes()int :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.addOnProjectionStateChangedListener(int,java.util.concurrent.Executor,android.app.UiModeManager$OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.UiModeManager.removeOnProjectionStateChangedListener(android.app.UiModeManager$OnProjectionStateChangedListener)void :: android.permission.READ_PROJECTION_STATE
android.app.GameManager.getGameMode(java.lang.String)int :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.setGameMode(java.lang.String,int)void :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.getAvailableGameModes(java.lang.String)int[] :: android.permission.MANAGE_GAME_MODE
android.app.GameManager.isAngleEnabled(java.lang.String)boolean :: android.permission.MANAGE_GAME_MODE
android.app.VrManager.registerVrStateCallback(java.util.concurrent.Executor,android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.unregisterVrStateCallback(android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.isPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.getVr2dDisplayId()int :: android.permission.RESTRICTED_VR_ACCESS
android.app.PendingIntent.queryIntentComponents(int)java.util.List<android.content.pm.ResolveInfo> :: android.permission.GET_INTENT_SENDER_INTENT
android.app.PendingIntent.intentFilterEquals(android.app.PendingIntent)boolean :: android.permission.GET_INTENT_SENDER_INTENT
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getPasswordComplexity()int :: android.permission.REQUEST_PASSWORD_COMPLEXITY
android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName,boolean,int)void :: android.permission.MANAGE_DEVICE_ADMINS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.app.admin.DevicePolicyManager.setDeviceOwner(android.content.ComponentName,java.lang.String,int)boolean :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS :: anyOf
android.app.admin.DevicePolicyManager.getDeviceOwnerUser()android.os.UserHandle :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled(android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.clearSystemUpdatePolicyFreezePeriodRecord()void :: android.permission.CLEAR_FREEZE_PERIOD
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.forceNetworkLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.forceSecurityLogs()long :: android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin(android.content.ComponentName,int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)void :: android.permission.GRANT_PROFILE_OWNER_DEVICE_IDS_ACCESS
android.app.admin.DevicePolicyManager.markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)void :: android.permission.MARK_DEVICE_ORGANIZATION_OWNED, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS :: anyOf
android.app.admin.DevicePolicyManager.isPackageAllowedToAccessCalendar(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.app.admin.DevicePolicyManager.getCrossProfileCalendarPackages()java.util.Set<java.lang.String> :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS :: anyOf
android.app.admin.DevicePolicyManager.getAllCrossProfilePackages()java.util.Set<java.lang.String> :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_PROFILES :: anyOf
android.app.admin.DevicePolicyManager.isManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isUnattendedManagedKiosk()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setNextOperationSafety(int,int)void :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.provisionFullyManagedDevice(android.app.admin.FullyManagedDeviceProvisioningParams)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.resetDefaultCrossProfileIntentFilters(int)void :: android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
android.app.admin.DevicePolicyManager.getPolicyExemptApps()java.util.Set<java.lang.String> :: android.permission.MANAGE_DEVICE_ADMINS
android.companion.CompanionDeviceManager.associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager$Callback,android.os.Handler)void :: android.permission.REQUEST_COMPANION_PROFILE_WATCH
android.companion.CompanionDeviceManager.isDeviceAssociatedForWifiConnection(java.lang.String,android.net.MacAddress,android.os.UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.getAllAssociations()java.util.List<android.companion.Association> :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.canPairWithoutPrompt(java.lang.String,java.lang.String,android.os.UserHandle)boolean :: android.permission.MANAGE_COMPANION_DEVICES
android.companion.CompanionDeviceManager.startObservingDevicePresence(java.lang.String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.stopObservingDevicePresence(java.lang.String)void :: android.permission.REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE
android.companion.CompanionDeviceManager.associate(java.lang.String,android.net.MacAddress,byte[])void :: android.permission.ASSOCIATE_COMPANION_DEVICES
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableSecureNfc(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.setControllerAlwaysOn(boolean)boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOn()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.isControllerAlwaysOnSupported()boolean :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.registerControllerAlwaysOnListener(java.util.concurrent.Executor,android.nfc.NfcAdapter$ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.NfcAdapter.unregisterControllerAlwaysOnListener(android.nfc.NfcAdapter$ControllerAlwaysOnListener)void :: android.permission.NFC_SET_CONTROLLER_ALWAYS_ON
android.nfc.cardemulation.CardEmulation.unsetOffHostForService(android.content.ComponentName)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.setOffHostForService(android.content.ComponentName,java.lang.String)boolean :: android.permission.NFC
android.nfc.cardemulation.CardEmulation.getAidsForPreferredPaymentService()java.util.List<java.lang.String> :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getRouteDestinationForPreferredPaymentService()java.lang.String :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.nfc.cardemulation.CardEmulation.getDescriptionForPreferredPaymentService()java.lang.CharSequence :: android.permission.NFC_PREFERRED_PAYMENT_INFO
android.provider.ContactsContract$SimContacts.addSimAccount(android.content.ContentResolver,java.lang.String,java.lang.String,int,int)void :: android.contacts.permission.MANAGE_SIM_ACCOUNTS
android.provider.ContactsContract$SimContacts.removeSimAccounts(android.content.ContentResolver,int)void :: android.contacts.permission.MANAGE_SIM_ACCOUNTS
android.provider.CallLog.storeCallComposerPicture(android.content.Context,java.io.InputStream,java.util.concurrent.Executor,android.os.OutcomeReceiver<android.net.Uri, android.provider.CallLog$CallComposerLoggingException>)void :: android.permission.WRITE_CALL_LOG, android.permission.INTERACT_ACROSS_USERS :: allOf
android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)boolean :: android.permission.MODIFY_SETTINGS_OVERRIDEABLE_BY_RESTORE
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Config.getString(android.content.ContentResolver,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.getStrings(android.content.ContentResolver,java.lang.String,java.util.List<java.lang.String>)java.util.Map<java.lang.String, java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.provider.Settings$Config.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.setStrings(android.content.ContentResolver,java.lang.String,java.util.Map<java.lang.String, java.lang.String>)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.resetToDefaults(android.content.ContentResolver,int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.setSyncDisabled(android.content.ContentResolver,int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.isSyncDisabled(android.content.ContentResolver)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.Settings$Config.registerMonitorCallback(android.content.ContentResolver,android.os.RemoteCallback)void :: android.permission.MONITOR_DEVICE_CONFIG_ACCESS
android.provider.DeviceConfig.getProperty(java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getProperties(java.lang.String,java.lang.String...)android.provider.DeviceConfig.Properties :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getString(java.lang.String,java.lang.String,java.lang.String)java.lang.String :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getBoolean(java.lang.String,java.lang.String,boolean)boolean :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getInt(java.lang.String,java.lang.String,int)int :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getLong(java.lang.String,java.lang.String,long)long :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.getFloat(java.lang.String,java.lang.String,float)float :: android.permission.READ_DEVICE_CONFIG
android.provider.DeviceConfig.setProperty(java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setProperties(android.provider.DeviceConfig$Properties)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.resetToDefaults(int,java.lang.String)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.setSyncDisabled(int)void :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.isSyncDisabled()boolean :: android.permission.WRITE_DEVICE_CONFIG
android.provider.DeviceConfig.addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.print.PrintManager.addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)java.util.List<android.printservice.PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()java.util.List<android.printservice.recommendation.RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.os.PowerWhitelistManager.addToWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.addToWhitelist(java.util.List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.removeFromWhitelist(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long,int,java.lang.String)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarily(java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerWhitelistManager.whitelistAppTemporarilyForEvent(java.lang.String,int,int,java.lang.String)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.DeviceIdleManager.endIdle(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToPermanentAllowList(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToPermanentAllowList(java.util.List<java.lang.String>)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.getAllowListedAppIds(boolean)int[] :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.removeFromPermanentAllowList(java.lang.String)void :: android.permission.DEVICE_POWER
android.os.PowerExemptionManager.addToTemporaryAllowList(java.lang.String,int,java.lang.String,long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.os.PowerExemptionManager.addToTemporaryAllowListForEvent(java.lang.String,int,java.lang.String,int)long :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.AlarmManager.setPrioritized(int,long,long,java.lang.String,java.util.concurrent.Executor,android.app.AlarmManager$OnAlarmListener)void :: android.permission.SCHEDULE_PRIORITIZED_ALARM
android.app.AlarmManager.setExact(int,long,android.app.PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setExact(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setAlarmClock(android.app.AlarmManager$AlarmClockInfo,android.app.PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.setExact(int,long,java.lang.String,java.util.concurrent.Executor,android.os.WorkSource,android.app.AlarmManager$OnAlarmListener)void :: android.permission.UPDATE_DEVICE_STATS, android.permission.SCHEDULE_EXACT_ALARM :: allOf
android.app.AlarmManager.setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)void :: android.permission.SCHEDULE_EXACT_ALARM
android.app.AlarmManager.setTime(long)void :: android.permission.SET_TIME
android.app.AlarmManager.setTimeZone(java.lang.String)void :: android.permission.SET_TIME_ZONE
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.media.MediaCommunicationManager.registerSessionCallback(java.util.concurrent.Executor,android.media.MediaCommunicationManager$SessionCallback)void :: android.permission.MEDIA_CONTENT_CONTROL
com.android.server.content.ContentService.putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)void :: android.permission.CACHE_CONTENT
com.android.server.content.ContentService.getCache(java.lang.String,android.net.Uri,int)android.os.Bundle :: android.permission.CACHE_CONTENT
com.android.server.BluetoothManagerService.onAirplaneModeChanged()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.checkBluetoothPermissions(android.content.AttributionSource,java.lang.String,boolean)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.disableBle(android.content.AttributionSource,android.os.IBinder)boolean :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.continueFromBleOnState()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService.sendBrEdrDownCallback(android.content.AttributionSource)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
com.android.server.BluetoothManagerService.unbindAndFinish()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothManagerService$BluetoothHandler.restartForReason(int)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
com.android.server.BluetoothManagerService.handleEnable(boolean)void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.handleDisable()void :: android.permission.BLUETOOTH_CONNECT
com.android.server.BluetoothManagerService.bluetoothStateChangeHandler(int,int)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
com.android.server.BluetoothManagerService.recoverBluetoothServiceFromError(boolean)void :: android.permission.BLUETOOTH_CONNECT, android.permission.BLUETOOTH_PRIVILEGED :: allOf
com.android.server.BluetoothManagerService.checkConnectPermissionForDataDelivery(android.content.Context,android.content.AttributionSource,java.lang.String)boolean :: android.permission.BLUETOOTH_CONNECT
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)void :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.cancelBugreport(int,java.lang.String)void :: android.permission.DUMP
com.android.server.graphics.fonts.FontManagerService.getFontConfig()android.text.FontConfig :: android.permission.UPDATE_FONTS
com.android.server.graphics.fonts.FontManagerService.updateFontFamily(android.graphics.fonts.FontUpdateRequest,int)int :: android.permission.UPDATE_FONTS
com.android.server.BluetoothModeChangeHelper.onAirplaneModeChanged(com.android.server.BluetoothManagerService)void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.BluetoothAirplaneModeListener.handleAirplaneModeChange()void :: android.permission.BLUETOOTH_PRIVILEGED
com.android.server.wm.WindowManagerService.showGlobalActions()void :: android.permission.INTERNAL_SYSTEM_WINDOW
com.android.server.app.GameManagerService.getAvailableGameModes(java.lang.String)int[] :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.setGameMode(java.lang.String,int,int)void :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.getAngleEnabled(java.lang.String,int)boolean :: android.permission.MANAGE_GAME_MODE
com.android.server.app.GameManagerService.updateUseAngle(java.lang.String,int)void :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.inputmethod.InputMethodManagerService$ShellCommandImpl.onCommand(java.lang.String)int :: android.permission.DUMP, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS :: allOf
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.getDomainVerificationInfo(java.lang.String)android.content.pm.verify.domain.DomainVerificationInfo :: android.permission.DOMAIN_VERIFICATION_AGENT, android.permission.UPDATE_DOMAIN_VERIFICATION_USER_SELECTION :: anyOf
com.android.server.pm.verify.domain.DomainVerificationManagerInternal.setDomainVerificationStatusInternal(int,java.util.UUID,java.util.Set<java.lang.String>,int)int :: android.permission.DOMAIN_VERIFICATION_AGENT
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setSupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.setUnsupportedCountries(java.util.List<java.lang.String>)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getSupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getUnsupportedCountries()java.util.List<java.lang.String> :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.isSupportedCountry(java.lang.String)boolean :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.overrideConfig(int,android.os.PersistableBundle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.CarrierConfigManager.getDefaultCarrierServicePackageName()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.AnomalyReporter.initialize(android.content.Context)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsMessage.getSubmitPduEncodedMessage(boolean,java.lang.String,java.lang.String,int,int,int,int,int,int)byte[] :: android.permission.BLUETOOTH_PRIVILEGED
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getNai()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimCardState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimApplicationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApplicationOnUicc(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isLteCdmaEvdoGsmWcdmaEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccCardsInfo()java.util.List<android.telephony.UiccCardInfo> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()android.telephony.UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getLogicalToPhysicalSlotMapping()java.util.Map<java.lang.Integer, java.lang.Integer> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierInfoForImsiEncryption(int)android.telephony.ImsiEncryptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.resetCarrierKeysForImsiEncryption()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedImsisFromGroup()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getIsimDomain()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getIsimImpu()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallState()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSubscription()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCallStateForSlot(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEnhancedRoamingIndicatorDisplayNumber()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION
android.telephony.TelephonyManager.requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.MODIFY_PHONE_STATE :: allOf
android.telephony.TelephonyManager.iccOpenLogicalChannelBySlot(int,java.lang.String,int)android.telephony.IccOpenLogicalChannelResponse :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccCloseLogicalChannelBySlot(int,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetRadioConfig()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.rebootRadio()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getIsimIst()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setForbiddenPlmns(java.util.List<java.lang.String>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetIms(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkType(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredNetworkTypeBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesBitmask()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypes()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAvailableNetworks()com.android.internal.telephony.CellNetworkScanResult :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getNetworkSelectionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getManualNetworkSelectionPlmn()java.lang.String :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.TelephonyManager.isInEmergencySmsMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setPreferredNetworkTypeBitmask(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypes(long)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedNetworkTypesForReason(int,long)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedNetworkTypesForReason(int)long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isTetheringApnRequired()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackage(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPackagesWithCarrierPrivileges()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegedPackagesForAllActiveSubscriptions()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallComposerStatus(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallComposerStatus()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPin(java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyIccLockPuk(java.lang.String,java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.shutdownAllRadios()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isAnyRadioPoweredOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getRadioPowerState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getMobileProvisioningUrl()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.MODIFY_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isDataRoamingEnabled()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getCdmaRoamingMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaRoamingMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaSubscriptionMode()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCdmaSubscriptionMode(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataRoamingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerState(int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAndUpdateDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getDefaultRespondViaMessageApplication()android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.telephony.TelephonyManager.getPhoneAccountHandle()android.telecom.PhoneAccountHandle :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSubscriptionId(android.telecom.PhoneAccountHandle)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.resetSettings()void :: android.permission.CONNECTIVITY_INTERNAL
android.telephony.TelephonyManager.getSimLocale()java.util.Locale :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.requestModemActivityInfo(java.util.concurrent.Executor,android.os.OutcomeReceiver)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION :: allOf
android.telephony.TelephonyManager.getCarrierIdFromMccMnc(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCertsFromCarrierPrivilegeAccessRules()java.util.List<java.lang.String> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getAidForAppType(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,java.util.List<android.service.carrier.CarrierIdentifier>)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCarrierRestrictionRules()android.telephony.CarrierRestrictionRules :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCarrierDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoNrEnabled(boolean)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVoNrEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.reportDefaultNetworkStatus(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.resetAllCarrierActions()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setPolicyDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabledForReason(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForReason(int)boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isManualNetworkSelectionAllowed()boolean :: android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setAlwaysReportSignalStrength(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isDataConnectionAllowed()boolean :: android.permission.ACCESS_NETWORK_STATE, android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getNumberOfModemsWithSimultaneousDataConnections()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setOpportunisticNetworkState(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOpportunisticNetworkEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getSupportedRadioAccessFamily()long :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.notifyOtaEmergencyNumberDbInstalled()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.resetOtaEmergencyNumberDbFilePath()void :: android.permission.READ_ACTIVE_EMERGENCY_SESSION
android.telephony.TelephonyManager.isEmergencyAssistanceEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList()java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberList(int)java.util.Map<java.lang.Integer, java.util.List<android.telephony.emergency.EmergencyNumber>> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.isPotentialEmergencyNumber(java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyNumberDbVersion()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getPreferredOpportunisticDataSubscription()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.enableModemForSlot(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isModemEnabledForSlot(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setMultiSimCarrierRestriction(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMultiSimSupported()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.switchMultiSimConfig(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.doesSwitchMultiSimConfigTriggerReboot()boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCarrierPrivilegeStatus(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isDataEnabledForApn(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isApnMetered(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSystemSelectionChannels(java.util.List<android.telephony.RadioAccessSpecifier>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSystemSelectionChannels()java.util.List<android.telephony.RadioAccessSpecifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.matchesCurrentSimOperator(java.lang.String,int,java.lang.String)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getCallForwarding(int,java.util.concurrent.Executor,android.telephony.TelephonyManager$CallForwardingInfoCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallForwarding(android.telephony.CallForwardingInfo,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCallWaitingStatus(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setCallWaitingEnabled(boolean,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setMobileDataPolicyEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isMobileDataPolicyEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.isIccLockEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setIccLockEnabled(boolean,java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.changeIccLockPin(java.lang.String,java.lang.String)android.telephony.PinResult :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.notifyUserActivity()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNrDualConnectivityState(int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isNrDualConnectivityEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEquivalentHomePlmns()java.util.List<java.lang.String> :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendThermalMitigationRequest(android.telephony.ThermalMitigationRequest)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.bootstrapAuthenticationRequest(int,android.net.Uri,android.telephony.gba.UaSecurityProtocolIdentifier,boolean,java.util.concurrent.Executor,android.telephony.TelephonyManager$BootstrapAuthenticationCallback)void :: android.permission.MODIFY_PHONE_STATE, android.permission.PERFORM_IMS_SINGLE_REGISTRATION :: anyOf
android.telephony.TelephonyManager.setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getPhoneCapability()android.telephony.PhoneCapability :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.prepareForUnattendedReboot()int :: android.permission.REBOOT
android.telephony.TelephonyManager.getNetworkSlicingConfiguration(java.util.concurrent.Executor,android.os.OutcomeReceiver)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE, android.permission.SEND_SMS :: allOf
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.copyMessageToIcc(byte[],byte[],int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.deleteMessageFromIcc(int)boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.updateMessageOnIcc(int,int,byte[])boolean :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getMessagesFromIcc()java.util.List<android.telephony.SmsMessage> :: android.permission.ACCESS_MESSAGES_ON_ICC
android.telephony.SmsManager.getSmsCapacityOnIcc()int :: android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE :: anyOf
android.telephony.SmsManager.getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager$FinancialSmsCallback)void :: android.permission.SMS_FINANCIAL_TRANSACTIONS
android.telephony.SmsManager.checkSmsShortCodeDestination(java.lang.String,java.lang.String)int :: android.permission.READ_PHONE_STATE
android.telephony.SmsManager.getSmscAddress()java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setSmscAddress(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.getPremiumSmsConsent(java.lang.String)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.setPremiumSmsConsent(java.lang.String,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.resetAllCellBroadcastRanges()void :: android.permission.MODIFY_CELL_BROADCASTS
android.telephony.ims.ImsMmTelManager.createForSubscriptionId(int)android.telephony.ims.ImsMmTelManager :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.ImsMmTelManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.isAdvancedCallingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setAdvancedCallingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isSupported(int,int,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVtSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVtSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isCrossSimCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setCrossSimCallingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isVoWiFiRoamingSettingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiNonPersistent(boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.setVoWiFiModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.getVoWiFiRoamingModeSetting()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setVoWiFiRoamingModeSetting(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.setRttCapabilitySetting(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsMmTelManager.isTtyOverVolteEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE :: anyOf
android.telephony.ims.ImsMmTelManager.getFeatureState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.registerProvisioningChangedCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.unregisterProvisioningChangedCallback(android.telephony.ims.ProvisioningManager$Callback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningIntValue(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStringValue(int)java.lang.String :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningIntValue(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStringValue(int,java.lang.String)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setProvisioningStatusForCapability(int,int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.getProvisioningStatusForCapability(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.getRcsProvisioningStatusForCapability(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsProvisioningStatusForCapability(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.notifyRcsAutoConfigurationReceived(byte[],boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ProvisioningManager.setRcsClientConfiguration(android.telephony.ims.RcsClientConfiguration)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.ProvisioningManager.isRcsVolteSingleRegistrationCapable()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.PERFORM_IMS_SINGLE_REGISTRATION :: anyOf
android.telephony.ims.ProvisioningManager.registerRcsProvisioningCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager$RcsProvisioningCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.PERFORM_IMS_SINGLE_REGISTRATION :: anyOf
android.telephony.ims.ProvisioningManager.unregisterRcsProvisioningCallback(android.telephony.ims.ProvisioningManager$RcsProvisioningCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.PERFORM_IMS_SINGLE_REGISTRATION :: anyOf
android.telephony.ims.ProvisioningManager.triggerRcsReconfiguration()void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.isSupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.PERFORM_IMS_SINGLE_REGISTRATION :: anyOf
android.telephony.ims.SipDelegateManager.createSipDelegate(android.telephony.ims.DelegateRequest,java.util.concurrent.Executor,android.telephony.ims.stub.DelegateConnectionStateCallback,android.telephony.ims.stub.DelegateConnectionMessageCallback)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.destroySipDelegate(android.telephony.ims.SipDelegateConnection,int)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.SipDelegateManager.triggerFullNetworkRegistration(android.telephony.ims.SipDelegateConnection,int,java.lang.String)void :: android.permission.PERFORM_IMS_SINGLE_REGISTRATION
android.telephony.ims.RcsUceAdapter.requestCapabilities(android.net.Uri,java.util.concurrent.Executor,android.telephony.ims.RcsUceAdapter$CapabilitiesCallback)void :: android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE, android.permission.READ_CONTACTS :: allOf
android.telephony.ims.RcsUceAdapter.requestAvailability(android.net.Uri,java.util.concurrent.Executor,android.telephony.ims.RcsUceAdapter$CapabilitiesCallback)void :: android.permission.ACCESS_RCS_USER_CAPABILITY_EXCHANGE, android.permission.READ_CONTACTS :: allOf
android.telephony.ims.RcsUceAdapter.getUcePublishState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.addOnPublishStateChangedListener(java.util.concurrent.Executor,android.telephony.ims.RcsUceAdapter$OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.removeOnPublishStateChangedListener(android.telephony.ims.RcsUceAdapter$OnPublishStateChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RcsUceAdapter.isUceSettingEnabled()boolean :: android.permission.READ_PHONE_STATE
android.telephony.ims.RcsUceAdapter.setUceSettingEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.ims.ImsRcsManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRECISE_PHONE_STATE
android.telephony.ims.ImsRcsManager.addOnAvailabilityChangedListener(java.util.concurrent.Executor,android.telephony.ims.ImsRcsManager$OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.removeOnAvailabilityChangedListener(android.telephony.ims.ImsRcsManager$OnAvailabilityChangedListener)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isCapable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.ImsRcsManager.isAvailable(int,int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.ims.RegistrationManager.getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForIcc(java.lang.String)android.telephony.SubscriptionInfo :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setIconTint(int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDisplayName(java.lang.String,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultVoiceSubscriptionId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultSmsSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDefaultDataSubId(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getCompleteActiveSubscriptionIdList()int[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isActiveSubscriptionId(int)boolean :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setPreferredDataSubscriptionId(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getPreferredDataSubscriptionId()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getOpportunisticSubscriptions()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.SubscriptionManager.setOpportunistic(boolean,int)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.createSubscriptionGroup(java.util.List<java.lang.Integer>)android.os.ParcelUuid :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.addSubscriptionsIntoGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.removeSubscriptionsFromGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getSubscriptionsInGroup(android.os.ParcelUuid)java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.setSubscriptionEnabled(int,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setUiccApplicationsEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.canDisablePhysicalSubscription()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.isSubscriptionEnabled(int)boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingPreference(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.setDeviceToDeviceStatusSharingContacts(int,android.net.Uri)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getEnabledSubscriptionId(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.getAllSimSpecificSettingsForBackup()byte[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SubscriptionManager.restoreSimSpecificSettingsForIccIdFromBackup(java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.restoreAllSimSpecificSettingsFromBackup(byte[])void :: android.permission.MODIFY_PHONE_STATE
android.location.LastLocationRequest$Builder.setHiddenFromAppOps(boolean)android.location.LastLocationRequest.Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LastLocationRequest$Builder.setAdasGnssBypass(boolean)android.location.LastLocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LastLocationRequest$Builder.setLocationSettingsIgnored(boolean)android.location.LastLocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest.setLocationSettingsIgnored(boolean)android.location.LocationRequest :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest$Builder.setHiddenFromAppOps(boolean)android.location.LocationRequest.Builder :: android.permission.UPDATE_APP_OPS_STATS
android.location.LocationRequest$Builder.setAdasGnssBypass(boolean)android.location.LocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest$Builder.setLocationSettingsIgnored(boolean)android.location.LocationRequest.Builder :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationRequest$Builder.setLowPower(boolean)android.location.LocationRequest.Builder :: android.permission.LOCATION_HARDWARE
android.location.LocationRequest$Builder.setWorkSource(android.os.WorkSource)android.location.LocationRequest.Builder :: android.permission.UPDATE_DEVICE_STATS
android.location.LocationManager.setExtraLocationControllerPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setExtraLocationControllerPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackage(java.lang.String)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationControllerExtraPackageEnabled(boolean)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.setLocationEnabledForUser(boolean,android.os.UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setAdasGnssLocationEnabled(boolean)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastLocation()android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String,android.location.LastLocationRequest)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getCurrentLocation(java.lang.String,android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.location.Location>)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.injectLocation(android.location.Location)boolean :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.location.LocationManager.isProviderPackage(java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(java.lang.String,java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.isProviderPackage(java.lang.String,java.lang.String,java.lang.String)boolean :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.getProviderPackages(java.lang.String)java.util.List<java.lang.String> :: android.permission.READ_DEVICE_CONFIG
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)void :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addProviderRequestChangedListener(java.util.concurrent.Executor,android.location.provider.ProviderRequest$ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.removeProviderRequestChangedListener(android.location.provider.ProviderRequest$ChangedListener)void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE, android.permission.UPDATE_APP_OPS_STATS :: allOf
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.security.KeyChain.setCredentialManagementApp(android.content.Context,java.lang.String,android.security.AppUriAuthenticationPolicy)boolean :: android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.KeyChain.removeCredentialManagementApp(android.content.Context)boolean :: android.permission.MANAGE_CREDENTIAL_MANAGEMENT_APP
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.RingtoneManager.ensureDefaultRingtones(android.content.Context)void :: android.permission.WRITE_SETTINGS
android.media.MediaPlayer.setOnRtpRxNoticeListener(android.content.Context,java.util.concurrent.Executor,android.media.MediaPlayer$OnRtpRxNoticeListener)void :: android.permission.BIND_IMS_SERVICE
android.media.AudioRecordingConfiguration.getClientUid()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.tv.tuner.Tuner.openDescrambler()android.media.tv.tuner.Descrambler :: android.permission.ACCESS_TV_DESCRAMBLER
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager$TvInputCallback.onCurrentTunedInfosUpdated(java.util.List<android.media.tv.TunedInfo>)void :: android.permission.ACCESS_TUNED_INFO
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()java.util.List<android.media.tv.TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getClientPid(java.lang.String)int :: android.permission.TUNER_RESOURCE_ACCESS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,java.lang.String,int,java.util.concurrent.Executor,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.getDvbDeviceList()java.util.List<android.media.tv.DvbDeviceInfo> :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.openDvbDevice(android.media.tv.DvbDeviceInfo,int)android.os.ParcelFileDescriptor :: android.permission.DVB_DEVICE
android.media.tv.TvInputManager.getCurrentTunedInfos()java.util.List<android.media.tv.TunedInfo> :: android.permission.ACCESS_TUNED_INFO
android.media.AudioAttributes$Builder.setSystemUsage(int)android.media.AudioAttributes.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioAttributes$Builder.setHotwordModeEnabled(boolean)android.media.AudioAttributes.Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.MediaRouter2.getInstance(android.content.Context,java.lang.String)android.media.MediaRouter2 :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.startScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.stopScan()void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.transfer(android.media.MediaRouter2$RoutingController,android.media.MediaRoute2Info)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.MediaRouter2.setRouteVolume(android.media.MediaRoute2Info,int)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.AudioRecord$Builder.setMaxSharedAudioHistoryMillis(long)android.media.AudioRecord.Builder :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioRecord$Builder.build()android.media.AudioRecord :: android.permission.RECORD_AUDIO
android.media.AudioRecord.shareAudioHistory(java.lang.String,long)android.media.MediaSyncEvent :: android.permission.CAPTURE_AUDIO_HOTWORD
android.media.AudioManager.setMasterMute(boolean,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMaxVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getMinVolumeIndexForAttributes(android.media.AudioAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setSupportedSystemUsages(int[])void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getSupportedSystemUsages()int[] :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.forceVolumeControlStream(int)void :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)android.media.AudioDeviceAttributes :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDevicesForStrategy(android.media.audiopolicy.AudioProductStrategy,java.util.List<android.media.AudioDeviceAttributes>)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForStrategy(android.media.audiopolicy.AudioProductStrategy)java.util.List<android.media.AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForStrategyChangedListener(android.media.AudioManager$OnPreferredDevicesForStrategyChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setPreferredDeviceForCapturePreset(int,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.clearPreferredDevicesForCapturePreset(int)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getPreferredDevicesForCapturePreset(int)java.util.List<android.media.AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.addOnPreferredDevicesForCapturePresetChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.removeOnPreferredDevicesForCapturePresetChangedListener(android.media.AudioManager$OnPreferredDevicesForCapturePresetChangedListener)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_AUDIO_ROUTING :: anyOf
android.media.AudioManager.requestAudioFocusForTest(android.media.AudioFocusRequest,java.lang.String,int,int)int :: android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.abandonAudioFocusForTest(android.media.AudioFocusRequest,java.lang.String)int :: android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)long :: android.permission.QUERY_AUDIO_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDevicesForAttributes(android.media.AudioAttributes)java.util.List<android.media.AudioDeviceAttributes> :: android.permission.MODIFY_AUDIO_ROUTING, android.permission.QUERY_AUDIO_STATE :: anyOf
android.media.AudioManager.setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)int :: android.permission.MODIFY_AUDIO_ROUTING, android.permission.QUERY_AUDIO_STATE :: anyOf
android.media.AudioManager.isFullVolumeDevice()boolean :: android.permission.MODIFY_AUDIO_ROUTING, android.permission.QUERY_AUDIO_STATE :: anyOf
android.media.AudioManager.setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo,long)boolean :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setEncodedSurroundMode(int)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.setSurroundFormatEnabled(int,boolean)boolean :: android.permission.WRITE_SETTINGS
android.media.AudioManager.getAudioProductStrategies()java.util.List<android.media.audiopolicy.AudioProductStrategy> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.getAudioVolumeGroups()java.util.List<android.media.audiopolicy.AudioVolumeGroup> :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setMultiAudioFocusEnabled(boolean)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModelState(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModuleProperties()android.media.soundtrigger.SoundTrigger.ModuleProperties :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.setParameter(java.util.UUID,int,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getParameter(java.util.UUID,int)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.queryParameter(java.util.UUID,int)android.hardware.soundtrigger.SoundTrigger.ModelParamRange :: android.permission.MANAGE_SOUND_TRIGGER
android.media.audiofx.AudioEffect.isEffectSupportedForDevice(java.util.UUID,android.media.AudioDeviceAttributes)boolean :: android.permission.MODIFY_DEFAULT_AUDIO_EFFECTS
android.media.AudioTrack$TunerConfiguration.getContentId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$TunerConfiguration.getSyncId()int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioTrack$Builder.setTunerConfiguration(android.media.AudioTrack$TunerConfiguration)android.media.AudioTrack.Builder :: android.permission.MODIFY_AUDIO_ROUTING
android.media.voice.KeyphraseModelManager.getKeyphraseSoundModel(int,java.util.Locale)android.media.voice.SoundTrigger.KeyphraseSoundModel :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.updateKeyphraseSoundModel(android.media.voice.SoundTrigger.KeyphraseSoundModel)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.voice.KeyphraseModelManager.deleteKeyphraseSoundModel(int,java.util.Locale)void :: android.permission.MANAGE_VOICE_KEYPHRASES
android.media.session.MediaSessionManager.getMediaKeyEventSession()android.media.session.MediaSession.Token :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.getMediaKeyEventSessionPackageName()java.lang.String :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.media.session.MediaSessionManager.addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventDispatchedListener(android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.session.MediaSessionManager.removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)void :: android.permission.MEDIA_CONTENT_CONTROL
android.media.AudioSystem.getMasterBalance()float :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.AudioSystem.setMasterBalance(float)int :: android.permission.MODIFY_AUDIO_SETTINGS
android.media.musicrecognition.MusicRecognitionManager.beginStreamingSearch(android.media.musicrecognition.RecognitionRequest,java.util.concurrent.Executor,android.media.musicrecognition.MusicRecognitionManager$RecognitionCallback)void :: android.permission.MANAGE_MUSIC_RECOGNITION
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setRestrictedAcrossUser(boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)android.net.Network :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)android.net.NetworkInfo :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkQuotaInfo()android.net.NetworkQuotaInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network,boolean,boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAvoidUnvalidated(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.disableScoring()void :: android.permission.REQUEST_NETWORK_SCORES
android.net.TrafficStats.setThreadStatsUid(int)void :: android.permission.UPDATE_DEVICE_STATS
android.net.TrafficStats.clearThreadStatsUid()void :: android.permission.UPDATE_DEVICE_STATS
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.IncidentManager.reportIncident(java.lang.String,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PHONE_STATE
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.UPDATE_APP_OPS_STATS
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.getConnectionStatistics()android.net.wifi.WifiConnectionStatistics :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)boolean :: android.permission.TETHER_PRIVILEGED
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int)java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.accounts.AccountManager.getAccounts()android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsAsUser(int)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByType(java.lang.String)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)android.accounts.AccountManagerFuture<java.lang.Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback<android.accounts.Account[]>,android.os.Handler)android.accounts.AccountManagerFuture<android.accounts.Account[]> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)void :: android.permission.GET_ACCOUNTS
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorTransform(android.view.Display$ColorTransform)void :: android.permission.CONFIGURE_DISPLAY_COLOR_TRANSFORM
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getEphemeralApplications()java.util.List<android.content.pm.EphemeralApplicationInfo> :: android.permission.ACCESS_EPHEMERAL_APPS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.accounts.AccountManager.getAccounts()android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsAsUser(int)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByType(java.lang.String)android.accounts.Account[] :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)android.accounts.AccountManagerFuture<java.lang.Boolean> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback<android.accounts.Account[]>,android.os.Handler)android.accounts.AccountManagerFuture<android.accounts.Account[]> :: android.permission.GET_ACCOUNTS
android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)void :: android.permission.GET_ACCOUNTS
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessageEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String)android.telecom.PhoneAccountHandle :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getPhoneAccountsSupportingScheme(java.lang.String)java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.getCallCapablePhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getSelfManagedPhoneAccounts()java.util.List<android.telecom.PhoneAccountHandle> :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle)java.lang.String :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isInManagedCall()boolean :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.endCall()boolean :: android.permission.ANSWER_PHONE_CALLS
android.telecom.TelecomManager.acceptRingingCall()void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.acceptRingingCall(int)void :: android.permission.ANSWER_PHONE_CALLS, android.permission.MODIFY_PHONE_STATE :: anyOf
android.telecom.TelecomManager.silenceRinger()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.isTtySupported()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telecom.TelecomManager.handleMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)boolean :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)android.net.Uri :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.cancelMissedCallsNotification()void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.showInCallScreen(boolean)void :: android.permission.READ_PHONE_STATE
android.telecom.TelecomManager.placeCall(android.net.Uri,android.os.Bundle)void :: android.permission.CALL_PHONE, android.permission.MANAGE_OWN_CALLS :: anyOf
android.telecom.TelecomManager.enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telecom.TelecomManager.dumpAnalytics()android.telecom.TelecomAnalytics :: android.permission.DUMP
android.content.pm.dex.ArtManager.snapshotRuntimeProfile(int,java.lang.String,java.lang.String,java.util.concurrent.Executor,android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallback)void :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.dex.ArtManager.isRuntimeProfilingEnabled(int)boolean :: android.permission.READ_RUNTIME_PROFILES, android.permission.PACKAGE_USAGE_STATS :: allOf
android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String,int,int)android.content.pm.PackageInfo :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.getInstalledPackagesAsUser(int,int)java.util.List<android.content.pm.PackageInfo> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)void :: android.permission.REVOKE_RUNTIME_PERMISSIONS
android.content.pm.PackageManager.getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)int :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.updatePermissionFlags(java.lang.String,java.lang.String,int,int,android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.REVOKE_RUNTIME_PERMISSIONS :: anyOf
android.content.pm.PackageManager.getInstantApps()java.util.List<android.content.pm.InstantAppInfo> :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.getInstantAppIcon(java.lang.String)android.graphics.drawable.Drawable :: android.permission.ACCESS_INSTANT_APPS
android.content.pm.PackageManager.queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)java.util.List<android.content.pm.ResolveInfo> :: android.permission.INTERACT_ACROSS_USERS
android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String,int)int :: android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.verifyIntentFilter(int,int,java.util.List<java.lang.String>)void :: android.permission.INTENT_FILTER_VERIFICATION_AGENT
android.content.pm.PackageManager.getIntentVerificationStatusAsUser(java.lang.String,int)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.updateIntentVerificationStatusAsUser(java.lang.String,int,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS
android.content.pm.PackageManager.getDefaultBrowserPackageNameAsUser(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.pm.PackageManager.setDefaultBrowserPackageNameAsUser(java.lang.String,int)boolean :: android.permission.SET_PREFERRED_APPLICATIONS, android.permission.INTERACT_ACROSS_USERS_FULL :: allOf
android.content.pm.PackageManager.setUpdateAvailable(java.lang.String,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageManager.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)void :: android.permission.DELETE_PACKAGES
android.content.pm.PackageManager.deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)void :: android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)void :: android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
android.content.pm.PackageManager.setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)java.lang.String[] :: android.permission.SUSPEND_APPS
android.content.pm.PackageManager.setHarmfulAppWarning(java.lang.String,java.lang.CharSequence)void :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageManager.getHarmfulAppWarning(java.lang.String)java.lang.CharSequence :: android.permission.SET_HARMFUL_APP_WARNINGS
android.content.pm.PackageInstaller.uninstall(java.lang.String,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)void :: android.permission.DELETE_PACKAGES, android.permission.REQUEST_DELETE_PACKAGES :: anyOf
android.content.pm.PackageInstaller.setPermissionsResult(int,boolean)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$Session.commitTransferred(android.content.IntentSender)void :: android.permission.INSTALL_PACKAGES
android.content.pm.PackageInstaller$SessionParams.setGrantedRuntimePermissions(java.lang.String[])void :: android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS
android.content.pm.PackageInstaller$SessionParams.setAllocateAggressive(boolean)void :: android.permission.ALLOCATE_AGGRESSIVE
android.content.Context.startActivityAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)int :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.sendStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.BROADCAST_STICKY
android.content.Context.removeStickyBroadcast(android.content.Intent)void :: android.permission.BROADCAST_STICKY
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)void :: android.permission.INTERACT_ACROSS_USERS, android.permission.BROADCAST_STICKY :: allOf
android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)android.content.Intent :: android.permission.INTERACT_ACROSS_USERS_FULL
android.content.Context.startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.startServiceAsUser(android.content.Intent,android.os.UserHandle)android.content.ComponentName :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.stopServiceAsUser(android.content.Intent,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.content.Context.bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)boolean :: android.permission.INTERACT_ACROSS_USERS
android.widget.TextView.setRestrictedAcrossUser(boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.accessibilityservice.AccessibilityService.getFingerprintGestureController()android.accessibilityservice.FingerprintGestureController :: android.permission.USE_FINGERPRINT
android.net.IpSecTransform.startNattKeepalive(android.net.IpSecTransform$NattKeepaliveCallback,int,android.os.Handler)void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform.stopNattKeepalive()void :: android.permission.MANAGE_IPSEC_TUNNELS, android.permission.PACKET_KEEPALIVE_OFFLOAD :: anyOf
android.net.IpSecTransform$Builder.buildTunnelModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)android.net.IpSecTransform :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.ConnectivityManager.getNetworkPreference()int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkInfo()android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetwork()android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveNetworkForUid(int)android.net.Network :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getActiveNetworkInfoForUid(int)android.net.NetworkInfo :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getNetworkInfo(int)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkInfo(android.net.Network)android.net.NetworkInfo :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworkInfo()android.net.NetworkInfo[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkForType(int)android.net.Network :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getAllNetworks()android.net.Network[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getActiveLinkProperties()android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(int)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLinkProperties(android.net.Network)android.net.LinkProperties :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network)android.net.NetworkCapabilities :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getCaptivePortalServerUrl()java.lang.String :: android.permission.LOCAL_MAC_ADDRESS
android.net.ConnectivityManager.getTetherableIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetheringErroredIfaces()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isTetheringSupported()boolean :: android.permission.TETHER_PRIVILEGED, android.permission.WRITE_SETTINGS :: anyOf
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.stopTethering(int)void :: android.permission.TETHER_PRIVILEGED
android.net.ConnectivityManager.getTetherableUsbRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableWifiRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getTetherableBluetoothRegexs()java.lang.String[] :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.getLastTetherError(java.lang.String)int :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.isNetworkSupported(int)boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.isActiveNetworkMetered()boolean :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAirplaneMode(boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.ACCESS_NETWORK_STATE
android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network,boolean,boolean)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.setAvoidUnvalidated(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.startCaptivePortalApp(android.net.Network)void :: android.permission.CONNECTIVITY_INTERNAL
android.net.ConnectivityManager.getMultipathPreference(android.net.Network)int :: android.permission.ACCESS_NETWORK_STATE
android.net.VpnService.prepareAndAuthorize(android.content.Context)void :: android.permission.CONTROL_VPN
android.net.NetworkScoreManager.getActiveScorerPackage()java.lang.String :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.getActiveScorer()android.net.NetworkScorerAppData :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.getAllValidScorers()java.util.List<android.net.NetworkScorerAppData> :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.updateScores(android.net.ScoredNetwork[])boolean :: android.permission.SCORE_NETWORKS
android.net.NetworkScoreManager.clearScores()boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.setActiveScorer(java.lang.String)boolean :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.disableScoring()void :: android.permission.SCORE_NETWORKS, android.permission.REQUEST_NETWORK_SCORES :: anyOf
android.net.NetworkScoreManager.requestScores(android.net.NetworkKey[])boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)void :: android.permission.REQUEST_NETWORK_SCORES
android.net.NetworkScoreManager.isCallerActiveScorer(int)boolean :: android.permission.REQUEST_NETWORK_SCORES
android.net.IpSecManager$IpSecTunnelInterface.addAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager$IpSecTunnelInterface.removeAddress(java.net.InetAddress,int)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.createIpSecTunnelInterface(java.net.InetAddress,java.net.InetAddress,android.net.Network)android.net.IpSecManager.IpSecTunnelInterface :: android.permission.MANAGE_IPSEC_TUNNELS
android.net.IpSecManager.applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface,int,android.net.IpSecTransform)void :: android.permission.MANAGE_IPSEC_TUNNELS
android.os.Vibrator.vibrate(long)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(long[],int,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.vibrate(int,java.lang.String,android.os.VibrationEffect,android.media.AudioAttributes)void :: android.permission.VIBRATE
android.os.Vibrator.cancel()void :: android.permission.VIBRATE
android.os.IncidentManager.reportIncident(android.os.IncidentReportArgs)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.os.PowerManager.userActivity(long,int,int)void :: android.permission.DEVICE_POWER, android.permission.USER_ACTIVITY :: anyOf
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)void :: android.permission.RECOVERY
android.os.RecoverySystem.processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File,boolean)void :: android.permission.RECOVERY
android.os.RecoverySystem.scheduleUpdateOnBoot(android.content.Context,java.io.File)void :: android.permission.RECOVERY
android.os.RecoverySystem.cancelScheduledUpdate(android.content.Context)void :: android.permission.RECOVERY
android.os.RecoverySystem.rebootWipeAb(android.content.Context,java.io.File,java.lang.String)void :: android.permission.RECOVERY, android.permission.REBOOT :: allOf
android.os.SystemUpdateManager.retrieveSystemUpdateInfo()android.os.Bundle :: android.permission.READ_SYSTEM_UPDATE_INFO, android.permission.RECOVERY :: anyOf
android.os.SystemUpdateManager.updateSystemUpdateInfo(android.os.PersistableBundle)void :: android.permission.RECOVERY
android.os.Build.getSerial()java.lang.String :: android.permission.READ_PHONE_STATE
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile(int)boolean :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSource(java.lang.String,android.os.UserHandle)int :: android.permission.MANAGE_USERS
android.os.UserManager.getUserRestrictionSources(java.lang.String,android.os.UserHandle)java.util.List<android.os.UserManager.EnforcingUser> :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountName()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountType()java.lang.String :: android.permission.MANAGE_USERS
android.os.UserManager.getSeedAccountOptions()android.os.PersistableBundle :: android.permission.MANAGE_USERS
android.os.UserManager.clearSeedAccountData()void :: android.permission.MANAGE_USERS
android.os.UserManager.setUserAdmin(int)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.getSerialNumbersOfUsers(boolean)long[] :: android.permission.MANAGE_USERS
android.os.UserManager.getUserAccount(int)java.lang.String :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.os.UserManager.setUserAccount(int,java.lang.String)void :: android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS :: allOf
android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier(boolean,byte[])void :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByCarrier()boolean :: android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser(boolean)void :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.oemlock.OemLockManager.isOemUnlockAllowedByUser()boolean :: android.permission.MANAGE_USER_OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()int :: android.permission.ACCESS_PDB_STATE
android.service.persistentdata.PersistentDataBlockManager.wipe()void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)void :: android.permission.OEM_UNLOCK_STATE
android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()boolean :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.service.persistentdata.PersistentDataBlockManager.getFlashLockState()int :: android.permission.READ_OEM_UNLOCK_STATE, android.permission.OEM_UNLOCK_STATE :: anyOf
android.security.keystore.recovery.RecoverySession.newInstance(android.security.keystore.recovery.RecoveryController)android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(byte[],byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.security.cert.CertPath,byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List<android.security.keystore.recovery.KeyChainProtectionParams>)byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeys(byte[],java.util.List<android.security.keystore.recovery.WrappedApplicationKey>)java.util.Map<java.lang.String, byte[]> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot(byte[],java.util.List<android.security.keystore.recovery.WrappedApplicationKey>)java.util.Map<java.lang.String, java.security.Key> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoverySession.close()void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getInstance(android.content.Context)android.security.keystore.recovery.RecoveryController :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.isRecoverableKeyStoreEnabled(android.content.Context)boolean :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.initRecoveryService(java.lang.String,byte[],byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryData()android.security.keystore.recovery.KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot()android.security.keystore.recovery.KeyChainSnapshot :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent(android.app.PendingIntent)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setServerParams(byte[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases(java.lang.String)java.util.List<java.lang.String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getAliases()java.util.List<java.lang.String> :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoveryStatus(java.lang.String,int)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String,java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoveryStatus(java.lang.String)int :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes(int[])void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes()int[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateAndStoreKey(java.lang.String,byte[])byte[] :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.generateKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.importKey(java.lang.String,byte[])java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getKey(java.lang.String)java.security.Key :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.removeKey(java.lang.String)void :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.createRecoverySession()android.security.keystore.recovery.RecoverySession :: android.permission.RECOVER_KEYSTORE
android.security.keystore.recovery.RecoveryController.getRootCertificates()java.util.Map<java.lang.String, java.security.cert.X509Certificate> :: android.permission.RECOVER_KEYSTORE
android.accounts.AccountManager.finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)android.accounts.AccountManagerFuture<android.os.Bundle> :: android.permission.INTERACT_ACROSS_USERS_FULL
android.bluetooth.BluetoothHearingAid.getActiveDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getVolume()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.adjustVolume(int)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getHiSyncId(android.bluetooth.BluetoothDevice)long :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceSide(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getDeviceMode(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.isEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getLeState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.disable()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getAddress()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setName(java.lang.String)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.setBluetoothClass(android.bluetooth.BluetoothClass)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothAdapter.getScanMode()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.startDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.cancelDiscovery()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.isDiscovering()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getMaxConnectedAudioDevices()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getBondedDevices()java.util.Set<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.getProfileConnectionState(int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.enableNoAutoConnect()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothAdapter.listenUsingL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getName()java.lang.String :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getType()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBatteryLevel()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.cancelBondProcess()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.removeBond()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothDevice.getBondState()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isConnected()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.isEncrypted()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getBluetoothClass()android.bluetooth.BluetoothClass :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.getUuids()android.os.ParcelUuid[] :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int)boolean :: android.permission.BLUETOOTH_PRIVILEGED
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createInsecureL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectedDevices()java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates(int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothProfile.getConnectionState(android.bluetooth.BluetoothDevice)int :: android.permission.BLUETOOTH
android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.app.PendingIntent)int :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List<android.bluetooth.le.ScanFilter>,android.bluetooth.le.ScanSettings,android.os.WorkSource,android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN, android.permission.UPDATE_DEVICE_STATS :: allOf
android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.le.BluetoothLeScanner.stopScan(android.app.PendingIntent)void :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall()boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.setActiveDevice(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothHeadset.getActiveDevice()android.bluetooth.BluetoothDevice :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHeadset.isInbandRingingEnabled()boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice,int)int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getConnectedDevices(int)java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int,int[])java.util.List<android.bluetooth.BluetoothDevice> :: android.permission.BLUETOOTH
android.hardware.camera2.CameraManager.openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)void :: android.permission.CAMERA
android.hardware.camera2.CameraManager.openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)void :: android.permission.CAMERA
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)void :: android.permission.USE_BIOMETRIC, android.permission.USE_FINGERPRINT :: anyOf
android.hardware.fingerprint.FingerprintManager.enroll(byte[],android.os.CancellationSignal,int,int,android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.preEnroll()long :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.postEnroll()int :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.setActiveUser(int)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.enumerate(int,android.hardware.fingerprint.FingerprintManager$EnumerateCallback)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.rename(int,int,java.lang.String)void :: android.permission.MANAGE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int)java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints()java.util.List<android.hardware.fingerprint.Fingerprint> :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints()boolean :: android.permission.USE_FINGERPRINT
android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int)boolean :: android.permission.USE_FINGERPRINT, android.permission.INTERACT_ACROSS_USERS :: allOf
android.hardware.fingerprint.FingerprintManager.isHardwareDetected()boolean :: android.permission.USE_FINGERPRINT
android.hardware.hdmi.HdmiControlManager.setStandbyMode(boolean)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.hdmi.HdmiControlManager.removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)void :: android.permission.HDMI_CEC
android.hardware.usb.UsbManager.grantPermission(android.hardware.usb.UsbDevice,java.lang.String)void :: android.permission.MANAGE_USB
android.hardware.radio.RadioManager.listModules(java.util.List<android.hardware.radio.RadioManager$ModuleProperties>)int :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.RadioTuner$Callback,android.os.Handler)android.hardware.radio.RadioTuner :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.addAnnouncementListener(java.util.concurrent.Executor,java.util.Set<java.lang.Integer>,android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.radio.RadioManager.removeAnnouncementListener(android.hardware.radio.Announcement$OnListUpdatedListener)void :: android.permission.ACCESS_BROADCAST_RADIO
android.hardware.location.ContextHubClient.sendMessageToNanoApp(android.hardware.location.NanoAppMessage)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubHandles()int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubInfo(int)android.hardware.location.ContextHubInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(int,android.hardware.location.NanoApp)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(int)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getNanoAppInstanceInfo(int)android.hardware.location.NanoAppInstanceInfo :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)int[] :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.sendMessage(int,int,android.hardware.location.ContextHubMessage)int :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.getContextHubs()java.util.List<android.hardware.location.ContextHubInfo> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.loadNanoApp(android.hardware.location.ContextHubInfo,android.hardware.location.NanoAppBinary)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.unloadNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.enableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.disableNanoApp(android.hardware.location.ContextHubInfo,long)android.hardware.location.ContextHubTransaction<java.lang.Void> :: android.permission.LOCATION_HARDWARE
android.hardware.location.ContextHubManager.queryNanoApps(android.hardware.location.ContextHubInfo)android.hardware.location.ContextHubTransaction<java.util.List<android.hardware.location.NanoAppState>> :: android.permission.LOCATION_HARDWARE
android.hardware.display.DisplayManager.setSaturationLevel(float)void :: android.permission.CONTROL_DISPLAY_SATURATION
android.hardware.display.DisplayManager.getBrightnessEvents()java.util.List<android.hardware.display.BrightnessChangeEvent> :: android.permission.BRIGHTNESS_SLIDER_USAGE
android.hardware.display.DisplayManager.getAmbientBrightnessStats()java.util.List<android.hardware.display.AmbientBrightnessDayStats> :: android.permission.ACCESS_AMBIENT_LIGHT_STATS
android.hardware.display.DisplayManager.setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)void :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManager.getDefaultBrightnessConfiguration()android.hardware.display.BrightnessConfiguration :: android.permission.CONFIGURE_DISPLAY_BRIGHTNESS
android.hardware.biometrics.BiometricPrompt.authenticate(android.hardware.biometrics.BiometricPrompt$CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.hardware.biometrics.BiometricPrompt.authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)void :: android.permission.USE_BIOMETRIC
android.view.InputDevice.enable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.InputDevice.disable()void :: android.permission.DISABLE_INPUT_DEVICE
android.view.WindowManager.getCurrentImeTouchRegion()android.graphics.Region :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.getVrInputMethodList()java.util.List<android.view.inputmethod.InputMethodInfo> :: android.permission.RESTRICTED_VR_ACCESS
android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.view.Display.requestColorMode(int)void :: android.permission.CONFIGURE_DISPLAY_COLOR_MODE
android.app.KeyguardManager$KeyguardLock.disableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()void :: android.permission.DISABLE_KEYGUARD
android.app.KeyguardManager.requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)void :: android.permission.SHOW_KEYGUARD_MESSAGE
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)void :: android.permission.DISABLE_KEYGUARD
android.app.usage.UsageStatsManager.getAppStandbyBucket(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBucket(java.lang.String,int)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.getAppStandbyBuckets()java.util.Map<java.lang.String, java.lang.Integer> :: android.permission.PACKAGE_USAGE_STATS
android.app.usage.UsageStatsManager.setAppStandbyBuckets(java.util.Map<java.lang.String, java.lang.Integer>)void :: android.permission.CHANGE_APP_IDLE_STATE
android.app.usage.UsageStatsManager.registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.unregisterAppUsageObserver(int)void :: android.permission.OBSERVE_APP_USAGE
android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String,long,android.os.UserHandle)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.ActivityManager.setTaskWindowingMode(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityManager.resizeStack(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityManager.removeStacksInWindowingModes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityManager.removeStacksWithActivityTypes(int[])void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityManager.moveTaskToFront(int,int)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.moveTaskToFront(int,int,android.os.Bundle)void :: android.permission.REORDER_TASKS
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)boolean :: android.permission.CLEAR_APP_USER_DATA, android.permission.ACCESS_INSTANT_APPS :: anyOf
android.app.ActivityManager.getPackageImportance(java.lang.String)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.getUidImportance(int)int :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)void :: android.permission.PACKAGE_USAGE_STATS
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)void :: android.permission.KILL_BACKGROUND_PROCESSES
android.app.ActivityManager.killUid(int,java.lang.String)void :: android.permission.KILL_UID
android.app.ActivityManager.forceStopPackage(java.lang.String)void :: android.permission.FORCE_STOP_PACKAGES
android.app.ActivityManager.getCurrentUser()int :: android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL :: anyOf
android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor,java.lang.String)void :: android.permission.DUMP
android.app.ActivityManager.setPersistentVrThread(int)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.AppOpsManager.getPackagesForOps(int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.getOpsForPackage(int,java.lang.String,int[])java.util.List<android.app.AppOpsManager.PackageOps> :: android.permission.GET_APP_OPS_STATS
android.app.AppOpsManager.setUidMode(int,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setUidMode(java.lang.String,int,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(int,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setMode(java.lang.String,int,java.lang.String,int)void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.setRestriction(int,int,int,java.lang.String[])void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.resetAllModes()void :: android.permission.MANAGE_APP_OPS_MODES
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.AppOpsManager.startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)void :: android.permission.WATCH_APPOPS
android.app.WallpaperManager.getFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.peekFastDrawable()android.graphics.drawable.Drawable :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.getWallpaperFile(int)android.os.ParcelFileDescriptor :: android.permission.READ_EXTERNAL_STORAGE
android.app.WallpaperManager.setResource(int)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setResource(int,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream)void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setStream(java.io.InputStream,android.graphics.Rect,boolean,int)int :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)void :: android.permission.SET_WALLPAPER_HINTS
android.app.WallpaperManager.clearWallpaper()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clearWallpaper(int,int)void :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName,int)boolean :: android.permission.SET_WALLPAPER_COMPONENT
android.app.WallpaperManager.clear()void :: android.permission.SET_WALLPAPER
android.app.WallpaperManager.clear(int)void :: android.permission.SET_WALLPAPER
android.app.BroadcastOptions.setTemporaryAppWhitelistDuration(long)void :: android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
android.app.AlarmManager.set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.AlarmManager.set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)void :: android.permission.UPDATE_DEVICE_STATS
android.app.backup.BackupManager.beginRestoreSession()android.app.backup.RestoreSession :: android.permission.BACKUP
android.app.backup.BackupManager.setBackupEnabled(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupEnabled()boolean :: android.permission.BACKUP
android.app.backup.BackupManager.isBackupServiceActive(android.os.UserHandle)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.setAutoRestore(boolean)void :: android.permission.BACKUP
android.app.backup.BackupManager.getCurrentTransport()java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.listAllTransports()java.lang.String[] :: android.permission.BACKUP
android.app.backup.BackupManager.updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)void :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)void :: android.permission.BACKUP
android.app.backup.BackupManager.backupNow()void :: android.permission.BACKUP
android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String)long :: android.permission.BACKUP
android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String)boolean :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver)int :: android.permission.BACKUP
android.app.backup.BackupManager.requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)int :: android.permission.BACKUP
android.app.backup.BackupManager.cancelBackups()void :: android.permission.BACKUP
android.app.backup.BackupManager.getConfigurationIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDestinationString(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementIntent(java.lang.String)android.content.Intent :: android.permission.BACKUP
android.app.backup.BackupManager.getDataManagementLabel(java.lang.String)java.lang.String :: android.permission.BACKUP
android.app.StatsManager.addConfig(long,byte[])void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.addConfiguration(long,byte[])boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfig(long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.removeConfiguration(long)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(android.app.PendingIntent,long,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setBroadcastSubscriber(long,long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setFetchReportsOperation(android.app.PendingIntent,long)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.setDataFetchOperation(long,android.app.PendingIntent)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getReports(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getData(long)byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getStatsMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.StatsManager.getMetadata()byte[] :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.app.job.JobInfo$Builder.setPersisted(boolean)android.app.job.JobInfo.Builder :: android.permission.RECEIVE_BOOT_COMPLETED
android.app.job.JobScheduler.scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)int :: android.permission.UPDATE_DEVICE_STATS
android.app.Activity.registerRemoteAnimations(android.view.RemoteAnimationDefinition)void :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.trust.TrustManager.setDeviceLockedForUser(int,boolean)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.isTrustUsuallyManaged(int)boolean :: android.permission.TRUST_LISTENER
android.app.trust.TrustManager.unlockedByFingerprintForUser(int)void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.trust.TrustManager.clearAllFingerprints()void :: android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
android.app.ActivityOptions.makeRemoteAnimation(android.view.RemoteAnimationAdapter)android.app.ActivityOptions :: android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS
android.app.VrManager.registerVrStateCallback(android.app.VrStateCallback,android.os.Handler)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.unregisterVrStateCallback(android.app.VrStateCallback)void :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.getVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.getPersistentVrModeEnabled()boolean :: android.permission.RESTRICTED_VR_ACCESS, android.permission.ACCESS_VR_STATE :: anyOf
android.app.VrManager.setPersistentVrModeEnabled(boolean)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setAndBindVrCompositor(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.VrManager.setStandbyEnabled(boolean)void :: android.permission.ACCESS_VR_MANAGER
android.app.VrManager.setVrInputMethod(android.content.ComponentName)void :: android.permission.RESTRICTED_VR_ACCESS
android.app.admin.DevicePolicyManager.packageHasActiveAdmins(java.lang.String)boolean :: android.permission.INTERACT_ACROSS_USERS_FULL
android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser()android.content.ComponentName :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwner()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser()java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName,java.lang.String)boolean :: android.permission.MANAGE_DEVICE_ADMINS
android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser(int)java.lang.String :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices(int)java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.getPermittedInputMethodsForCurrentUser()java.util.List<java.lang.String> :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long,boolean)void :: android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
android.app.admin.DevicePolicyManager.getUserProvisioningState()int :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioned()boolean :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.setDeviceProvisioningConfigApplied()void :: android.permission.MANAGE_USERS
android.app.admin.DevicePolicyManager.isDeviceProvisioningConfigApplied()boolean :: android.permission.MANAGE_USERS
android.nfc.NfcAdapter.enable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disable(boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.enableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.disableNdefPush()boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])boolean :: android.permission.WRITE_SECURE_SETTINGS
android.nfc.NfcAdapter.removeNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Secure.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.provider.Settings$Global.resetToDefaults(android.content.ContentResolver,java.lang.String)void :: android.permission.WRITE_SECURE_SETTINGS
android.print.PrintManager.addPrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.removePrintServicesChangeListener(android.print.PrintManager$PrintServicesChangeListener)void :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.getPrintServices(int)java.util.List<android.printservice.PrintServiceInfo> :: android.permission.READ_PRINT_SERVICES
android.print.PrintManager.addPrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener,android.os.Handler)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.removePrintServiceRecommendationsChangeListener(android.print.PrintManager$PrintServiceRecommendationsChangeListener)void :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.print.PrintManager.getPrintServiceRecommendations()java.util.List<android.printservice.recommendation.RecommendationInfo> :: android.permission.READ_PRINT_SERVICE_RECOMMENDATIONS
android.net.wifi.RttManager.getRttCapabilities()android.net.wifi.RttManager.RttCapabilities :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.startRanging(android.net.wifi.RttManager$RttParams[],android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.stopRanging(android.net.wifi.RttManager$RttListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.enableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.RttManager.disableResponder(android.net.wifi.RttManager$ResponderCallback)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.rtt.WifiRttManager.startRanging(android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.startRanging(android.os.WorkSource,android.net.wifi.rtt.RangingRequest,java.util.concurrent.Executor,android.net.wifi.rtt.RangingResultCallback)void :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION, android.permission.CHANGE_WIFI_STATE, android.permission.ACCESS_WIFI_STATE :: allOf
android.net.wifi.rtt.WifiRttManager.cancelRanging(android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE :: allOf
android.net.wifi.WifiManager.getPrivilegedConfiguredNetworks()java.util.List<android.net.wifi.WifiConfiguration> :: android.permission.READ_WIFI_CREDENTIAL
android.net.wifi.WifiManager.startScan(android.os.WorkSource)boolean :: android.permission.UPDATE_DEVICE_STATS
android.net.wifi.WifiManager.getWifiApState()int :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.isWifiApEnabled()boolean :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.getWifiApConfiguration()android.net.wifi.WifiConfiguration :: android.permission.ACCESS_WIFI_STATE
android.net.wifi.WifiManager.setWifiApConfiguration(android.net.wifi.WifiConfiguration)boolean :: android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager.registerSoftApCallback(android.net.wifi.WifiManager$SoftApCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.unregisterSoftApCallback(android.net.wifi.WifiManager$SoftApCallback)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.enableVerboseLogging(int)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.getScanResults()boolean :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.startScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$ScanListener,android.os.WorkSource)void :: android.permission.LOCATION_HARDWARE
android.net.wifi.WifiScanner.stopScan(android.net.wifi.WifiScanner$ScanListener)void :: android.permission.LOCATION_HARDWARE
com.android.server.InputMethodManagerService.handleSetBindInstantServiceAllowed(android.os.ShellCommand)int :: android.permission.MANAGE_BIND_INSTANT_SERVICE
com.android.server.InputMethodManagerService.handleShellCommandEnableDisableInputMethod(android.os.ShellCommand,boolean)int :: android.permission.WRITE_SECURE_SETTINGS
com.android.server.InputMethodManagerService.handleShellCommandResetInputMethod(android.os.ShellCommand)int :: android.permission.WRITE_SECURE_SETTINGS
android.telephony.euicc.EuiccManager.getOtaStatus()int :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.continueOperation(android.content.Intent,android.os.Bundle)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.getDefaultDownloadableSubscriptionList(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.deleteSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.switchToSubscription(int,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.euicc.EuiccManager.eraseSubscriptions(android.app.PendingIntent)void :: android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS
android.telephony.CarrierConfigManager.updateConfigForPhoneId(int,java.lang.String)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceSoftwareVersion(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDeviceId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getImei(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMeid(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNai()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCellLocation()android.telephony.CellLocation :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.telephony.TelephonyManager.enableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.enableLocationUpdates(int)void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.disableLocationUpdates()void :: android.permission.CONTROL_LOCATION_UPDATES
android.telephony.TelephonyManager.getNeighboringCellInfo()java.util.List<android.telephony.NeighboringCellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getCarrierConfig()android.os.PersistableBundle :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getDataNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceNetworkType(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSimSerialNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getUiccSlotsInfo()android.telephony.UiccSlotInfo[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.refreshUiccProfile()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.switchSlots(int[])boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getSubscriberId(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getGroupIdLevel1(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1Number()java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1Number(int)java.lang.String :: android.permission.READ_PHONE_STATE, android.permission.READ_SMS, android.permission.READ_PHONE_NUMBERS :: anyOf
android.telephony.TelephonyManager.getLine1AlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLine1AlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMsisdn(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailNumber(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int)java.lang.String :: android.permission.CALL_PRIVILEGED
android.telephony.TelephonyManager.isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)boolean :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVisualVoicemailPackageName()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)void :: android.permission.SEND_SMS
android.telephony.TelephonyManager.setVoiceActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setVoiceActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataActivationState(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState()int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getDataActivationState(int)int :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMessageCount(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getVoiceMailAlphaTag(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode(int)int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText()java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriText(int)java.lang.String :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getAllCellInfo()java.util.List<android.telephony.CellInfo> :: android.permission.ACCESS_COARSE_LOCATION
android.telephony.TelephonyManager.getForbiddenPlmns()java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getForbiddenPlmns(int,int)java.lang.String[] :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setNetworkSelectionModeManual(java.lang.String,boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMdn(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin()java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaMin(int)java.lang.String :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.call(java.lang.String,java.lang.String)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.endCall()boolean :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.answerRingingCall()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isOffhook()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRinging()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isIdle()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.isRadioOn()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.supplyPin(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPuk(java.lang.String,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPinReportResult(java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.supplyPukReportResult(java.lang.String,java.lang.String)int[] :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)void :: android.permission.CALL_PHONE
android.telephony.TelephonyManager.handlePinMmi(java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.handlePinMmiForSubscriber(int,java.lang.String)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.toggleRadioOnOff()void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadio(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioPower(boolean)boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.disableDataConnectivity()boolean :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setDataEnabled(int,boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.enableVideoCalling(boolean)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.isVideoCallingEnabled()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE, android.permission.READ_PHONE_STATE :: anyOf
android.telephony.TelephonyManager.setSimPowerState(int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setSimPowerStateForSlot(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getServiceState()android.telephony.ServiceState :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getTelephonyHistograms()java.util.List<android.telephony.TelephonyHistogram> :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getAllowedCarriers(int)java.util.List<android.service.carrier.CarrierIdentifier> :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.getEmergencyCallbackMode()boolean :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setRadioIndicationUpdateMode(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SmsManager.sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE, android.permission.SEND_SMS :: allOf
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfo(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex(int)android.telephony.SubscriptionInfo :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoList()java.util.List<android.telephony.SubscriptionInfo> :: android.permission.READ_PHONE_STATE
android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount()int :: android.permission.READ_PHONE_STATE
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(java.lang.String,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.injectLocation(android.location.Location)boolean :: android.permission.LOCATION_HARDWARE, android.permission.ACCESS_FINE_LOCATION :: allOf
android.location.LocationManager.addProximityAlert(double,double,float,long,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)void :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.setLocationEnabledForUser(boolean,android.os.UserHandle)void :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.setProviderEnabledForUser(java.lang.String,boolean,android.os.UserHandle)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.location.LocationManager.getLastKnownLocation(java.lang.String)android.location.Location :: android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION :: anyOf
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)boolean :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGpsStatus(android.location.GpsStatus)android.location.GpsStatus :: android.permission.ACCESS_FINE_LOCATION
android.location.LocationManager.getGnssBatchSize()int :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.registerGnssBatchedLocationCallback(long,boolean,android.location.BatchedLocationCallback,android.os.Handler)boolean :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.flushGnssBatch()void :: android.permission.LOCATION_HARDWARE
android.location.LocationManager.unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)boolean :: android.permission.LOCATION_HARDWARE
android.security.keystore.AttestationUtils.attestDeviceIds(android.content.Context,int[],byte[])java.security.cert.X509Certificate[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.media.RingtoneManager.enableSyncFromParent(android.content.Context)void :: android.permission.WRITE_SECURE_SETTINGS
android.media.tv.TvView.setMain()void :: android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE
android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.setParentalControlsEnabled(boolean)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating)void :: android.permission.MODIFY_PARENTAL_CONTROLS
android.media.tv.TvInputManager.getTvContentRatingSystemList()java.util.List<android.media.tv.TvContentRatingSystemInfo> :: android.permission.READ_CONTENT_RATING_SYSTEMS
android.media.tv.TvInputManager.notifyPreviewProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyWatchNextProgramBrowsableDisabled(java.lang.String,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)void :: android.permission.NOTIFY_TV_INPUTS
android.media.tv.TvInputManager.getAvailableTvStreamConfigList(java.lang.String)java.util.List<android.media.tv.TvStreamConfig> :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.isSingleSessionActive()boolean :: android.permission.CAPTURE_TV_INPUT
android.media.tv.TvInputManager.getHardwareList()java.util.List<android.media.tv.TvInputHardwareInfo> :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)android.media.tv.TvInputManager.Hardware :: android.permission.TV_INPUT_HARDWARE
android.media.tv.TvInputManager.releaseTvInputHardware(int,android.media.tv.TvInputManager$Hardware)void :: android.permission.TV_INPUT_HARDWARE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)int :: android.permission.MODIFY_PHONE_STATE
android.media.AudioManager.requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_PHONE_STATE, android.permission.MODIFY_AUDIO_ROUTING :: anyOf
android.media.AudioManager.requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.setFocusRequestResult(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.dispatchAudioFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy)int :: android.permission.MODIFY_AUDIO_ROUTING
android.media.AudioManager.unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)void :: android.permission.MODIFY_AUDIO_ROUTING
android.media.soundtrigger.SoundTriggerDetector.startRecognition(int)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerDetector.stopRecognition()boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.updateModel(android.media.soundtrigger.SoundTriggerManager$Model)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.getModel(java.util.UUID)android.media.soundtrigger.SoundTriggerManager.Model :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.deleteModel(java.util.UUID)void :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.createSoundTriggerDetector(java.util.UUID,android.media.soundtrigger.SoundTriggerDetector$Callback,android.os.Handler)android.media.soundtrigger.SoundTriggerDetector :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.loadSoundModel(android.hardware.soundtrigger.SoundTrigger.SoundModel)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.app.PendingIntent,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.startRecognition(java.util.UUID,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger.RecognitionConfig)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.stopRecognition(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.unloadSoundModel(java.util.UUID)int :: android.permission.MANAGE_SOUND_TRIGGER
android.media.soundtrigger.SoundTriggerManager.isRecognitionActive(java.util.UUID)boolean :: android.permission.MANAGE_SOUND_TRIGGER
android.media.session.MediaSessionManager.setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)void :: android.permission.SET_VOLUME_KEY_LONG_PRESS_LISTENER
android.media.session.MediaSessionManager.setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)void :: android.permission.SET_MEDIA_KEY_LISTENER
