android.app.ActivityTaskManager.resizeStack(int,android.graphics.Rect)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.resizeStack(int,android.graphics.Rect,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingMode(int,int,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.ActivityTaskManager.setTaskWindowingModeSplitScreenPrimary(int,int,boolean,boolean,android.graphics.Rect,boolean)void :: android.permission.MANAGE_ACTIVITY_STACKS
android.app.AppOpsManager.startWatchingActive(int[],android.app.AppOpsManager$OnOpActiveChangedListener)void :: android.permission.WATCH_APPOPS
android.app.StatsManager.setPullerCallback(int,android.os.IStatsPullerCallback)void :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.bluetooth.BluetoothA2dpSink.isA2dpPlaying(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingInsecureL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.listenUsingL2capCoc(int)android.bluetooth.BluetoothServerSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothAdapter.setScanMode(int,int)boolean :: android.permission.WRITE_SECURE_SETTINGS
android.bluetooth.BluetoothDevice.createInsecureL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothDevice.createL2capCocSocket(int,int)android.bluetooth.BluetoothSocket :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.adjustVolume(int)void :: android.permission.BLUETOOTH
android.bluetooth.BluetoothHearingAid.getVolume()int :: android.permission.BLUETOOTH
android.bluetooth.BluetoothPan.connect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.bluetooth.BluetoothPan.disconnect(android.bluetooth.BluetoothDevice)boolean :: android.permission.BLUETOOTH_ADMIN
android.hardware.biometrics.BiometricManager.onConfirmDeviceCredentialError(int,java.lang.String)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.onConfirmDeviceCredentialSuccess()void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricManager.registerCancellationCallback(android.hardware.biometrics.IBiometricConfirmDeviceCredentialCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt$Builder.setFromConfirmDeviceCredential()android.hardware.biometrics.BiometricPrompt.Builder :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.biometrics.BiometricPrompt.authenticateUser(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback,int,android.hardware.biometrics.IBiometricConfirmDeviceCredentialCallback)void :: android.permission.USE_BIOMETRIC_INTERNAL
android.hardware.display.DisplayManager.setTemporaryBrightness(int)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.hardware.display.DisplayManagerGlobal.setTemporaryBrightness(int)void :: android.permission.CONTROL_DISPLAY_BRIGHTNESS
android.location.LocationManager.getGnssCapabilities()android.location.GnssCapabilities :: android.permission.ACCESS_FINE_LOCATION
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler,int)void :: android.permission.CHANGE_NETWORK_STATE
android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int)void :: android.permission.CHANGE_NETWORK_STATE
android.net.wifi.WifiManager.notifyUserOfApBandConversion()void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerNetworkRequestMatchCallback(android.net.wifi.WifiManager$NetworkRequestMatchCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerSoftApCallback(android.net.wifi.WifiManager$SoftApCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiManager.registerTrafficStateCallback(android.net.wifi.WifiManager$TrafficStateCallback,android.os.Handler)void :: android.permission.NETWORK_SETTINGS
android.net.wifi.WifiScanner.startDisconnectedPnoScan(android.net.wifi.WifiScanner$ScanSettings,android.net.wifi.WifiScanner$PnoSettings,android.net.wifi.WifiScanner$PnoScanListener)void :: android.permission.NETWORK_STACK
android.net.wifi.p2p.WifiP2pManager.listen(android.net.wifi.p2p.WifiP2pManager$Channel,boolean,android.net.wifi.p2p.WifiP2pManager$ActionListener)void :: android.permission.NETWORK_SETTINGS
android.os.UserManager.createProfileForUserEvenWhenDisallowed(java.lang.String,int,int,java.lang.String[])android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.UserManager.getManagedProfileBadge(int)int :: android.permission.MANAGE_USERS
android.os.UserManager.isManagedProfile()boolean :: android.permission.MANAGE_USERS
android.os.UserManager.preCreateUser(int)android.content.pm.UserInfo :: android.permission.MANAGE_USERS
android.os.image.DynamicSystemManager$Session.write(byte[])boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.setEnable(boolean)boolean :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.os.image.DynamicSystemManager.startInstallation(long,long)android.os.image.DynamicSystemManager.Session :: android.permission.MANAGE_DYNAMIC_SYSTEM
android.permission.PermissionControllerManager.getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnGetRuntimePermissionBackupCallback)void :: android.permission.GET_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.restoreDelayedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Boolean>)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.permission.PermissionControllerManager.restoreRuntimePermissionBackup(byte[],android.os.UserHandle)void :: android.permission.GRANT_RUNTIME_PERMISSIONS
android.provider.DeviceConfig.addOnPropertyChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertyChangedListener)void :: android.permission.READ_DEVICE_CONFIG
android.provider.MediaStore.deleteContributedMedia(android.content.Context,java.lang.String,android.os.UserHandle)void :: android.permission.CLEAR_APP_USER_DATA
android.provider.MediaStore.getContributedMediaSize(android.content.Context,java.lang.String,android.os.UserHandle)long :: android.permission.CLEAR_APP_USER_DATA
android.provider.MediaStore.setRequireOriginal(android.net.Uri)android.net.Uri :: android.permission.ACCESS_MEDIA_LOCATION
android.provider.Settings$Config.putString(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)boolean :: android.permission.WRITE_DEVICE_CONFIG
android.telephony.SmsManager.sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List<java.lang.String>,android.app.PendingIntent,android.app.PendingIntent,int,boolean,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconIndex()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getCdmaEriIconMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getLteOnCdmaMode()int :: android.permission.READ_PHONE_STATE
android.telephony.TelephonyManager.getMergedSubscriberIdsFromGroup()java.lang.String[] :: android.permission.READ_PRIVILEGED_PHONE_STATE
android.telephony.TelephonyManager.setAllowedCarriers(int,android.service.carrier.CarrierIdentifier)int :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyManager.setRadioIndicationUpdateMode(int,int)void :: android.permission.MODIFY_PHONE_STATE
android.telephony.TelephonyScanManager.requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String)android.telephony.NetworkScan :: android.permission.MODIFY_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION
android.util.StatsLog.logWatchdogRollbackOccurred(int,java.lang.String,long,int,java.lang.String)boolean :: android.permission.DUMP, android.permission.PACKAGE_USAGE_STATS :: allOf
android.view.accessibility.AccessibilityManager.getAccessibilityShortcutService()java.lang.String :: android.permission.MANAGE_ACCESSIBILITY
com.android.internal.telephony.TelephonyPermissions.enforeceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void :: android.permission.READ_PHONE_STATE
com.android.internal.telephony.TelephonyPermissions.enforeceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)void :: android.permission.READ_PRIVILEGED_PHONE_STATE
com.android.server.ConnectivityService.setVpnPackageAuthorization(java.lang.String,int,boolean)void :: android.permission.INTERACT_ACROSS_USERS_FULL
com.android.server.connectivity.Vpn.setAlwaysOnPackage(java.lang.String,boolean,java.util.List<java.lang.String>)boolean :: android.permission.BIND_VPN_SERVICE
com.android.server.os.BugreportManagerServiceImpl.setListener(java.lang.String,android.os.IDumpstateListener,boolean)android.os.IDumpstateToken :: android.permission.DUMP
com.android.server.os.BugreportManagerServiceImpl.startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener)void :: android.permission.DUMP
com.android.server.pm.PackageManagerService.doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],boolean)void :: android.permission.ACCESS_INSTANT_APPS
com.android.server.pm.PackageManagerService.unsuspendForSuspendingPackage(java.lang.String,int)void :: android.permission.SUSPEND_APPS
com.android.server.pm.UserManagerService.ensureCanModifyQuietMode(java.lang.String,int,boolean)void :: android.permission.MANAGE_USERS, android.permission.MODIFY_QUIET_MODE